---
http_interactions:
- request:
    method: get
    uri: https://gitlab.com/api/v4/projects/gitlab-org%2Fgitlab-ce/issues/28850
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.36 (KHTML,
        like Gecko) Chrome/35.0.1916.153 Safari/537.36
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Wed, 13 Jun 2018 12:11:59 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '55475'
      Vary:
      - Accept-Encoding
      - Origin
      Cache-Control:
      - max-age=0, private, must-revalidate
      Etag:
      - W/"759e3ed94b0aec540930f66afdb9df4a"
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Request-Id:
      - 7686c003-a8e9-48e8-8229-f96b2f88e724
      X-Runtime:
      - '0.105539'
      Strict-Transport-Security:
      - max-age=31536000
      Ratelimit-Limit:
      - '600'
      Ratelimit-Observed:
      - '1'
      Ratelimit-Remaining:
      - '599'
      Ratelimit-Reset:
      - '1528891979'
      Ratelimit-Resettime:
      - Thu, 13 Jun 2018 12:12:59 GMT
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 13 Jun 2018 12:11:59 GMT
- request:
    method: get
    uri: https://gitlab.com/api/v4/projects/gitlab-org%2Fgitlab-ce/issues/28850/notes
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Private-Token:
      - yk4sv48-tHyUJNBkcf56
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Wed, 13 Jun 2018 12:12:01 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '44493'
      Vary:
      - Accept-Encoding
      - Origin
      Cache-Control:
      - max-age=0, private, must-revalidate
      Etag:
      - W/"4a4e22471368fd53fcefbb7008c13aba"
      Link:
      - <https://gitlab.com/api/v4/projects/gitlab-org%2Fgitlab-ce/issues/28850/notes?id=gitlab-org%2Fgitlab-ce&noteable_id=28850&order_by=created_at&page=1&per_page=20&sort=desc>;
        rel="first", <https://gitlab.com/api/v4/projects/gitlab-org%2Fgitlab-ce/issues/28850/notes?id=gitlab-org%2Fgitlab-ce&noteable_id=28850&order_by=created_at&page=1&per_page=20&sort=desc>;
        rel="last"
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Next-Page:
      - ''
      X-Page:
      - '1'
      X-Per-Page:
      - '20'
      X-Prev-Page:
      - ''
      X-Request-Id:
      - 3ac139c0-6d1d-4a9c-ac68-5a6a6cb5bd3f
      X-Runtime:
      - '0.987012'
      X-Total:
      - '17'
      X-Total-Pages:
      - '1'
      Strict-Transport-Security:
      - max-age=31536000
      Ratelimit-Limit:
      - '600'
      Ratelimit-Observed:
      - '2'
      Ratelimit-Remaining:
      - '598'
      Ratelimit-Reset:
      - '1528891981'
      Ratelimit-Resettime:
      - Thu, 13 Jun 2018 12:13:01 GMT
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Wed, 13 Jun 2018 12:12:02 GMT
recorded_with: VCR 4.0.0
