---
http_interactions:
- request:
    method: get
    uri: https://bugzilla.gnome.org/show_bug.cgi?id=380612
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.36 (KHTML,
        like Gecko) Chrome/35.0.1916.153 Safari/537.36
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 19 Nov 2015 19:37:38 GMT
      Server:
      - Apache/2.2.15 (Red Hat)
      X-Xss-Protection:
      - 1; mode=block
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Set-Cookie:
      - Bugzilla_login_request_cookie=50JVsy7iqr; path=/; secure; HttpOnly
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Access-Control-Allow-Origin:
      - https://bugzilla.gnome.org
      Vary:
      - Accept-Encoding
      Connection:
      - close
      Transfer-Encoding:
      - chunked
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Thu, 19 Nov 2015 19:37:42 GMT
- request:
    method: get
    uri: https://gitlab.com/api/v4/projects/https:%2F%2Fbugzilla.gnome.org%2Fshow_bug.cgi%3Fid=380612
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Private-Token:
      - yk4sv48-tHyUJNBkcf56
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Server:
      - nginx
      Date:
      - Wed, 13 Jun 2018 15:43:35 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '35'
      Cache-Control:
      - no-cache
      Vary:
      - Origin
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Request-Id:
      - ad93ba0e-e399-4847-9ee1-277a0add2803
      X-Runtime:
      - '0.026416'
      Ratelimit-Limit:
      - '600'
      Ratelimit-Observed:
      - '3'
      Ratelimit-Remaining:
      - '597'
      Ratelimit-Reset:
      - '1528904675'
      Ratelimit-Resettime:
      - Thu, 13 Jun 2018 15:44:35 GMT
    body:
      encoding: UTF-8
      string: '{"message":"404 Project Not Found"}'
    http_version: 
  recorded_at: Wed, 13 Jun 2018 15:43:35 GMT
recorded_with: VCR 4.0.0
