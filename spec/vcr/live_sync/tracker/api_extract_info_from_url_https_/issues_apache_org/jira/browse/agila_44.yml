---
http_interactions:
- request:
    method: get
    uri: https://issues.apache.org/jira/browse/AGILA-44
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.36 (KHTML,
        like Gecko) Chrome/35.0.1916.153 Safari/537.36
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 19 Nov 2015 19:37:37 GMT
      Server:
      - Apache-Coyote/1.1
      X-Arequestid:
      - 1177x30599041x5
      Cache-Control:
      - no-cache, no-store, must-revalidate
      Pragma:
      - no-cache
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      X-Asen:
      - SEN-2062203
      X-Ausername:
      - anonymous
      X-Content-Type-Options:
      - nosniff
      Content-Type:
      - text/html;charset=utf-8
      Set-Cookie:
      - JSESSIONID=FC331375D22913557F2908DA338433CF; Path=/jira/; Secure; HttpOnly
      - atlassian.xsrf.token=A5KQ-2QAV-T4JA-FDED|6032981406b801d3ca23241d8edcbaddb9d7d8df|lout;
        Path=/jira; Secure
      Via:
      - 1.1 issues.apache.org
      Vary:
      - Accept-Encoding
      Connection:
      - close
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        CgoKCgoKPCFET0NUWVBFIGh0bWw+CjxodG1sIGxhbmc9ImVuIj4KPGhlYWQ+CiAgICAKCgoKCgoKPG1ldGEgY2hhcnNldD0idXRmLTgiPgo8bWV0YSBodHRwLWVxdWl2PSJYLVVBLUNvbXBhdGlibGUiIGNvbnRlbnQ9IklFPUVkZ2UiLz4KPHRpdGxlPltBR0lMQS00NF0gT3B0aW9uIHRvIHVzZSBKU1AgSW5jbHVkZXMgZm9yIHJlbmRlcmluZyBmb3JtcyBmb3IgVGFzayBub2Rlcy4gLSBBU0YgSklSQTwvdGl0bGU+CjxtZXRhIG5hbWU9ImFwcGxpY2F0aW9uLW5hbWUiIGNvbnRlbnQ9IkpJUkEiIGRhdGEtbmFtZT0iamlyYSIgZGF0YS12ZXJzaW9uPSI2LjMuNCI+PG1ldGEgbmFtZT0iYWpzLWhhc0NyaXRlcmlhQXV0b1VwZGF0ZSIgY29udGVudD0idHJ1ZSI+CjxtZXRhIG5hbWU9ImFqcy12aWV3aXNzdWUtdXNlLWhpc3RvcnktYXBpIiBjb250ZW50PSJmYWxzZSI+CjxtZXRhIG5hbWU9ImFqcy12aWV3aXNzdWUtbWF4LWNhY2hlLXNpemUiIGNvbnRlbnQ9IiI+CjxtZXRhIG5hbWU9ImFqcy12aWV3LWlzc3VlLXRyYWNlLWtleSIgY29udGVudD0iamlyYS5pc3N1ZS5yZWZyZXNoZWQiPgo8bWV0YSBuYW1lPSJhanMtdmlldy1pc3N1ZS1wc3ljaG8ta2V5IiBjb250ZW50PSJqaXJhLnBzeWNoby5pc3N1ZS5yZWZyZXNoZWQiPgo8bWV0YSBuYW1lPSJhanMtdmlldy1pc3N1ZS1yZWZyZXNoZWQtY2FjaGVkLWtleSIgY29udGVudD0iamlyYS5wc3ljaG8uaXNzdWUucmVmcmVzaGVkLmNhY2hlZCI+CjxtZXRhIG5hbWU9ImFqcy1yZXR1cm4tdG8tc2VhcmNoLXRyYWNlLWtleSIgY29udGVudD0iamlyYS5yZXR1cm5lZC50by5zZWFyY2giPgo8bWV0YSBuYW1lPSJhanMtcmV0dXJuLXRvLXNlYXJjaC1wc3ljaG8ta2V5IiBjb250ZW50PSJqaXJhLnBzeWNoby5yZXR1cm5lZC50by5zZWFyY2giPgo8bWV0YSBuYW1lPSJhanMtZGVmYXVsdC1hdmF0YXItdXJsIiBjb250ZW50PSIvamlyYS9zZWN1cmUvdXNlcmF2YXRhcj9zaXplPXhzbWFsbCZhbXA7YXZhdGFySWQ9MTA0NTMiPgo8bWV0YSBuYW1lPSJhanMtamlyYS5pc3N1ZXMucHJlZmVycmVkLmxheW91dC5rZXkiIGNvbnRlbnQ9InNwbGl0LXZpZXciPgo8bWV0YSBuYW1lPSJhanMtbWF4LXJlY2VudC1zZWFyY2hlcnMiIGNvbnRlbnQ9IjEwIj4KPG1ldGEgbmFtZT0iYWpzLWppcmEtYmFzZS11cmwiIGNvbnRlbnQ9Imh0dHBzOi8vaXNzdWVzLmFwYWNoZS5vcmcvamlyYSI+CjxtZXRhIG5hbWU9ImFqcy1zZXJ2ZXJSZW5kZXJlZFZpZXdJc3N1ZSIgY29udGVudD0idHJ1ZSI+CjxtZXRhIG5hbWU9ImFqcy1jYW4tc2VhcmNoLXVzZXJzIiBjb250ZW50PSJmYWxzZSI+CjxtZXRhIG5hbWU9ImFqcy1jYW4tZWRpdC13YXRjaGVycyIgY29udGVudD0iZmFsc2UiPgo8bWV0YSBuYW1lPSJhanMtaXNzdWUta2V5IiBjb250ZW50PSJBR0lMQS00NCI+CjxtZXRhIG5hbWU9ImFqcy1zZXJ2ZXItdmlldy1pc3N1ZS1pcy1lZGl0YWJsZSIgY29udGVudD0iZmFsc2UiPgo8bWV0YSBuYW1lPSJhanMtZGV2LW1vZGUiIGNvbnRlbnQ9ImZhbHNlIj4KPG1ldGEgbmFtZT0iYWpzLWNvbnRleHQtcGF0aCIgY29udGVudD0iL2ppcmEiPgo8bWV0YSBuYW1lPSJhanMtdmVyc2lvbi1udW1iZXIiIGNvbnRlbnQ9IjYuMy40Ij4KPG1ldGEgbmFtZT0iYWpzLWJ1aWxkLW51bWJlciIgY29udGVudD0iNjMzMiI+CjxtZXRhIG5hbWU9ImFqcy1pcy1iZXRhIiBjb250ZW50PSJmYWxzZSI+CjxtZXRhIG5hbWU9ImFqcy1pcy1yYyIgY29udGVudD0iZmFsc2UiPgo8bWV0YSBuYW1lPSJhanMtaXMtc25hcHNob3QiIGNvbnRlbnQ9ImZhbHNlIj4KPG1ldGEgbmFtZT0iYWpzLWlzLW1pbGVzdG9uZSIgY29udGVudD0iZmFsc2UiPgo8bWV0YSBuYW1lPSJhanMtcmVtb3RlLXVzZXIiIGNvbnRlbnQ9IiI+CjxtZXRhIG5hbWU9ImFqcy1yZW1vdGUtdXNlci1mdWxsbmFtZSIgY29udGVudD0iIj4KPG1ldGEgbmFtZT0iYWpzLXVzZXItbG9jYWxlIiBjb250ZW50PSJlbl9VSyI+CjxtZXRhIG5hbWU9ImFqcy11c2VyLWxvY2FsZS1ncm91cC1zZXBhcmF0b3IiIGNvbnRlbnQ9IiwiPgo8bWV0YSBuYW1lPSJhanMtYXBwLXRpdGxlIiBjb250ZW50PSJBU0YgSklSQSI+CjxtZXRhIG5hbWU9ImFqcy1rZXlib2FyZC1zaG9ydGN1dHMtZW5hYmxlZCIgY29udGVudD0idHJ1ZSI+CjxtZXRhIG5hbWU9ImFqcy1rZXlib2FyZC1hY2Nlc3NrZXktbW9kaWZpZXIiIGNvbnRlbnQ9IkN0cmwrQWx0Ij4KPG1ldGEgbmFtZT0iYWpzLWVuYWJsZWQtZGFyay1mZWF0dXJlcyIgY29udGVudD0iWyZxdW90O2ppcmEucGx1Z2luLmRldnN0YXR1cy5waGFzZXR3by5lbmFibGVkJnF1b3Q7LCZxdW90O2NvbS5hdGxhc3NpYW4uamlyYS5jb25maWcuUERMJnF1b3Q7LCZxdW90O2ppcmEuZnJvdGhlci5yZXBvcnRlci5maWVsZCZxdW90OywmcXVvdDtqaXJhLnBsdWdpbi5kZXZzdGF0dXMucGhhc2V0d28mcXVvdDssJnF1b3Q7Y29tLmF0bGFzc2lhbi5qaXJhLmRhcmtmZWF0dXJlLkNvbW1vbkhlYWRlciZxdW90OywmcXVvdDthcHAtc3dpdGNoZXIubmV3JnF1b3Q7LCZxdW90O2Zyb3RoZXIuYXNzaWduZWUuZmllbGQmcXVvdDssJnF1b3Q7amlyYS5pc3N1ZS5zdGF0dXMubG96ZW5nZSZxdW90O10iPgo8bWV0YSBuYW1lPSJhanMtZGF0ZS1yZWxhdGl2aXplIiBjb250ZW50PSJ0cnVlIj4KPG1ldGEgbmFtZT0iYWpzLWRhdGUtdGltZSIgY29udGVudD0iSEg6bW0iPgo8bWV0YSBuYW1lPSJhanMtZGF0ZS1kYXkiIGNvbnRlbnQ9IkVFRUUgSEg6bW0iPgo8bWV0YSBuYW1lPSJhanMtZGF0ZS1kbXkiIGNvbnRlbnQ9ImRkL01NTS95eSI+CjxtZXRhIG5hbWU9ImFqcy1kYXRlLWNvbXBsZXRlIiBjb250ZW50PSJkZC9NTU0veXkgSEg6bW0iPgo8bWV0YSBuYW1lPSJhanMtaW4tYWRtaW4tbW9kZSIgY29udGVudD0iZmFsc2UiPgo8bWV0YSBuYW1lPSJhanMtaXMtc3lzYWRtaW4iIGNvbnRlbnQ9ImZhbHNlIj4KPG1ldGEgbmFtZT0iYWpzLWlzLWFkbWluIiBjb250ZW50PSJmYWxzZSI+CjxtZXRhIG5hbWU9ImFqcy1vdXRnb2luZy1tYWlsLWVuYWJsZWQiIGNvbnRlbnQ9InRydWUiPgo8bWV0YSBuYW1lPSJhanMtd2hhdHMtbmV3LWlmcmFtZS1zcmMiIGNvbnRlbnQ9Imh0dHBzOi8vZG9jcy5hdGxhc3NpYW4uY29tL2ppcmEvZG9jcy0wNjMvd2hhdHNuZXcvaWZyYW1lIj4gPG1ldGEgbmFtZT0iYWpzLXdoYXRzbmV3LWZ1bGwtbGluayIgY29udGVudD0iaHR0cHM6Ly9kb2NzLmF0bGFzc2lhbi5jb20vamlyYS9kb2NzLTA2My93aGF0c25ldy9mdWxsIj4KCgogICAgCjxtZXRhIGlkPSJhdGxhc3NpYW4tdG9rZW4iIG5hbWU9ImF0bGFzc2lhbi10b2tlbiIgY29udGVudD0iQTVLUS0yUUFWLVQ0SkEtRkRFRHw2MDMyOTgxNDA2YjgwMWQzY2EyMzI0MWQ4ZWRjYmFkZGI5ZDdkOGRmfGxvdXQiPgoKCgo8bGluayByZWw9InNob3J0Y3V0IGljb24iIGhyZWY9Ii9qaXJhL3MvZW5fVUstdWd0aW45LzYzMzIvNzMvXy9mYXZpY29uLmljbyI+CjxsaW5rIHJlbD0ic2VhcmNoIiB0eXBlPSJhcHBsaWNhdGlvbi9vcGVuc2VhcmNoZGVzY3JpcHRpb24reG1sIiBocmVmPSIvamlyYS9vc2QuanNwIiB0aXRsZT0iW0FHSUxBLTQ0XSBPcHRpb24gdG8gdXNlIEpTUCBJbmNsdWRlcyBmb3IgcmVuZGVyaW5nIGZvcm1zIGZvciBUYXNrIG5vZGVzLiAtIEFTRiBKSVJBIi8+CgogICAgCgoKPCEtLVtpZiBJRV0+PCFbZW5kaWZdLS0+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij52YXIgY29udGV4dFBhdGggPSAnL2ppcmEnOzwvc2NyaXB0Pgo8c2NyaXB0Pgp3aW5kb3cuV1JNPXdpbmRvdy5XUk18fHt9O3dpbmRvdy5XUk0uX3VucGFyc2VkRGF0YT13aW5kb3cuV1JNLl91bnBhcnNlZERhdGF8fHt9OwpXUk0uX3VucGFyc2VkRGF0YVsiY29tLmF0bGFzc2lhbi5wbHVnaW5zLmF0bGFzc2lhbi1wbHVnaW5zLXdlYnJlc291cmNlLXBsdWdpbjpjb250ZXh0LXBhdGguY29udGV4dC1wYXRoIl09IlwiL2ppcmFcIiI7Cjwvc2NyaXB0Pgo8bGluayB0eXBlPSJ0ZXh0L2NzcyIgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvamlyYS9zL2QyZGRlYTE4ZjAwNjY1Y2U4NjIzZTM2YmQ0ZTNjN2M1LUNETi9lbl9VSy11Z3RpbjkvNjMzMi83My85Ni9fL2Rvd25sb2FkL3N1cGVyYmF0Y2gvY3NzL2JhdGNoLmNzcyIgbWVkaWE9ImFsbCI+CjwhLS1baWYgbHRlIElFIDldPgo8bGluayB0eXBlPSJ0ZXh0L2NzcyIgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSIvamlyYS9zL2Q0MWQ4Y2Q5OGYwMGIyMDRlOTgwMDk5OGVjZjg0MjdlLUNETi9lbl9VSy11Z3RpbjkvNjMzMi83My85Ni9fL2Rvd25sb2FkL3N1cGVyYmF0Y2gvY3NzL2JhdGNoLmNzcz9jb25kaXRpb25hbENvbW1lbnQ9bHRlK0lFKzkiIG1lZGlhPSJhbGwiPgo8IVtlbmRpZl0tLT4KPGxpbmsgdHlwZT0idGV4dC9jc3MiIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iL2ppcmEvcy9kMmRkZWExOGYwMDY2NWNlODYyM2UzNmJkNGUzYzdjNS1DRE4vZW5fVUstdWd0aW45LzYzMzIvNzMvMzk0NDJkOWM1MTMwNTU1NThmYTYyY2ViMjNjZTJhOWQvXy9kb3dubG9hZC9jb250ZXh0YmF0Y2gvY3NzL2ppcmEubmF2aWdhdG9yLnNpbXBsZSxqaXJhLm5hdmlnYXRvci5hZHZhbmNlZCxqaXJhLnZpZXcuaXNzdWUsYXRsLmdlbmVyYWwsamlyYS5uYXZpZ2F0b3Iua2lja2FzcyxqaXJhLmdsb2JhbCxqaXJhLmdlbmVyYWwvYmF0Y2guY3NzP2hpcGNoYXRUb2tlbj10cnVlJmFtcDtqYWc9dHJ1ZSZhbXA7YWdpbGVfZ2xvYmFsX2FkbWluX2NvbmRpdGlvbj10cnVlJmFtcDtqYWd1c2VyPXRydWUiIG1lZGlhPSJhbGwiPgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvamlyYS9zLzk2NjEzZDA5MjkyOTI3ZDA5NTI5ZmJhZTQ0YTNmNGMzLUNETi9lbl9VSy11Z3RpbjkvNjMzMi83My85Ni9fL2Rvd25sb2FkL3N1cGVyYmF0Y2gvanMvYmF0Y2guanM/bG9jYWxlPWVuLVVLIiA+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9qaXJhL3MvZTllYjllZDE2ZTIyNzgwYWUyZjM4MDEwYTU4YzRjYjEtVC9lbl9VSy11Z3RpbjkvNjMzMi83My8zOTQ0MmQ5YzUxMzA1NTU1OGZhNjJjZWIyM2NlMmE5ZC9fL2Rvd25sb2FkL2NvbnRleHRiYXRjaC9qcy9qaXJhLm5hdmlnYXRvci5zaW1wbGUsamlyYS5uYXZpZ2F0b3IuYWR2YW5jZWQsamlyYS52aWV3Lmlzc3VlLGF0bC5nZW5lcmFsLGppcmEubmF2aWdhdG9yLmtpY2thc3MsamlyYS5nbG9iYWwsamlyYS5nZW5lcmFsL2JhdGNoLmpzP2xvY2FsZT1lbi1VSyZhbXA7aGlwY2hhdFRva2VuPXRydWUmYW1wO2phZz10cnVlJmFtcDthZ2lsZV9nbG9iYWxfYWRtaW5fY29uZGl0aW9uPXRydWUmYW1wO2phZ3VzZXI9dHJ1ZSIgPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvamlyYS9zL2Q0MWQ4Y2Q5OGYwMGIyMDRlOTgwMDk5OGVjZjg0MjdlLUNETi9lbl9VSy11Z3RpbjkvNjMzMi83My8xLjAvXy9kb3dubG9hZC9iYXRjaC9qaXJhLndlYnJlc291cmNlczpjYWxlbmRhci1lbi9qaXJhLndlYnJlc291cmNlczpjYWxlbmRhci1lbi5qcyIgPjwvc2NyaXB0Pgo8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCIgc3JjPSIvamlyYS9zL2JmZTdjMWUwNmQ5MTFlNTNmYzk2ODczZDMxMTc2MzUyLVQvZW5fVUstdWd0aW45LzYzMzIvNzMvMS41L18vZG93bmxvYWQvYmF0Y2gvY29tLmF0bGFzc2lhbi5hZG1pbmlzdHJhdGlvbi5hdGxhc3NpYW4tYWRtaW4tcXVpY2tzZWFyY2gtamlyYTphZG1pbi1xdWlja3NlYXJjaC13ZWJyZXNvdXJjZXMvY29tLmF0bGFzc2lhbi5hZG1pbmlzdHJhdGlvbi5hdGxhc3NpYW4tYWRtaW4tcXVpY2tzZWFyY2gtamlyYTphZG1pbi1xdWlja3NlYXJjaC13ZWJyZXNvdXJjZXMuanM/bG9jYWxlPWVuLVVLIiA+PC9zY3JpcHQ+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9qaXJhL3MvZDQxZDhjZDk4ZjAwYjIwNGU5ODAwOTk4ZWNmODQyN2UtVC9lbl9VSy11Z3RpbjkvNjMzMi83My8xLjIuNy9fL2Rvd25sb2FkL2JhdGNoL2NvbS5hdGxhc3NpYW4uc2VydmljZWRlc2s6c2QtdHJhY2tpbmctc3RhdGUtZW5hYmxlZC9jb20uYXRsYXNzaWFuLnNlcnZpY2VkZXNrOnNkLXRyYWNraW5nLXN0YXRlLWVuYWJsZWQuanMiID48L3NjcmlwdD4KCjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0IiBzcmM9Ii9qaXJhL3Jlc3QvYXBpLzEuMC9zaG9ydGN1dHMvNjMzMi84OTRkYjg0NmMyNTI5YThiNDhmOWY2YTBmODdhODMxYy9zaG9ydGN1dHMuanM/Y29udGV4dD1pc3N1ZW5hdmlnYXRpb24mYW1wO2NvbnRleHQ9aXNzdWVhY3Rpb24iPjwvc2NyaXB0PgoKCiAgICAKICAgIAogICAgCiAgICA8bWV0YSBuYW1lPSJkZWNvcmF0b3IiIGNvbnRlbnQ9ImF0bC5nZW5lcmFsIj4KICAgIDxtZXRhIGlkPSJpc05hdmlnYXRvciIgbmFtZT0iaXNOYXZpZ2F0b3IiIGNvbnRlbnQ9InRydWUiPgogICAgPG1ldGEgbmFtZT0iYWpzLWlzLWlubGluZS1lZGl0LWVuYWJsZWQiIGNvbnRlbnQ9InRydWUiPgogICAgPG1ldGEgbmFtZT0iYWpzLXVzZXIuc2VhcmNoLm1vZGUiIGNvbnRlbnQ9ImJhc2ljIj4KICAgIDxtZXRhIG5hbWU9ImFqcy1pc3N1ZS1zZWFyY2gtaGVscC10aXRsZSIgY29udGVudD0iU2VhcmNoaW5nIGZvciBJc3N1ZXMiPgogICAgPG1ldGEgbmFtZT0iYWpzLWlzc3VlLXNlYXJjaC1oZWxwLXVybCIgY29udGVudD0iaHR0cHM6Ly9kb2NzLmF0bGFzc2lhbi5jb20vamlyYS9kb2NzLTA2My9TZWFyY2hpbmcrZm9yK0lzc3VlcyI+CiAgICA8bWV0YSBuYW1lPSJhanMtYWR2YW5jZWQtc2VhcmNoLWhlbHAtdGl0bGUiIGNvbnRlbnQ9IlBlcmZvcm1pbmcgQWR2YW5jZWQgU2VhcmNoZXMiPgogICAgPG1ldGEgbmFtZT0iYWpzLWFkdmFuY2VkLXNlYXJjaC1oZWxwLXVybCIgY29udGVudD0iaHR0cHM6Ly9kb2NzLmF0bGFzc2lhbi5jb20vamlyYS9kb2NzLTA2My9BZHZhbmNlZCtTZWFyY2hpbmciPgogICAgCjwvaGVhZD4KPGJvZHkgaWQ9ImppcmEiIGNsYXNzPSJhdWktbGF5b3V0IGF1aS10aGVtZS1kZWZhdWx0IGthIGFqYXgtaXNzdWUtc2VhcmNoLWFuZC12aWV3IHBhZ2UtdHlwZS1uYXZpZ2F0b3IgbmF2aWdhdG9yLWlzc3VlLW9ubHkiIGRhdGEtdmVyc2lvbj0iNi4zLjQiPgo8ZGl2IGlkPSJwYWdlIj4KICAgIDxoZWFkZXIgaWQ9ImhlYWRlciIgcm9sZT0iYmFubmVyIj4KICAgICAgICAKICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKICAgIAoKCgoKCgoKCgoKICAgICAgICAKCgoKCiAgICAgICAgCgoKPG5hdiBjbGFzcz0iYXVpLWhlYWRlciBhdWktZHJvcGRvd24yLXRyaWdnZXItZ3JvdXAiIHJvbGU9Im5hdmlnYXRpb24iPjxkaXYgY2xhc3M9ImF1aS1oZWFkZXItaW5uZXIiPjxkaXYgY2xhc3M9ImF1aS1oZWFkZXItYmVmb3JlIj48YSBjbGFzcz0iYXVpLWRyb3Bkb3duMi10cmlnZ2VyIGFwcC1zd2l0Y2hlci10cmlnZ2VyIiBhcmlhLW93bnM9ImFwcC1zd2l0Y2hlciIgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgdGFiaW5kZXg9IjAiPjxzcGFuIGNsYXNzPSJhdWktaWNvbiBhdWktaWNvbi1zbWFsbCBhdWktaWNvbmZvbnQtYXBwc3dpdGNoZXIiPkxpbmtlZCBBcHBsaWNhdGlvbnM8L3NwYW4+PC9hPjxkaXYgaWQ9ImFwcC1zd2l0Y2hlciIgY2xhc3M9ImF1aS1kcm9wZG93bjIgYXVpLXN0eWxlLWRlZmF1bHQiPjxkaXYgY2xhc3M9ImFwcC1zd2l0Y2hlci1sb2FkaW5nIj5Mb2FkaW5nJmhlbGxpcDs8L2Rpdj48L2Rpdj48c2NyaXB0PgogICAgICAgICAgICAoZnVuY3Rpb24gKE5MKSB7CiAgICAgICAgICAgICAgICB2YXIgaW5pdGlhbGlzZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAvLyBGb3Igc29tZSBtaWxlc3RvbmVzIG9mIEFVSSwgdGhlIGF0bGFzc2lhbiBzb3kgbmFtZXNwYWNlIHdhcyByZW5hbWVkIHRvIGF1aS4gSGFuZGxlIHRoYXQgaGVyZSBieSBlbnN1cmluZyB0aGF0IHdpbmRvdy5hdGxhc3NpYW4gaXMgZGVmaW5lZC4KICAgICAgICAgICAgICAgICAgICB3aW5kb3cuYXRsYXNzaWFuID0gd2luZG93LmF0bGFzc2lhbiB8fCB3aW5kb3cuYXVpOwogICAgICAgICAgICAgICAgICAgIG5ldyBOTC5BcHBTd2l0Y2hlcih7CiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3Bkb3duQ29udGVudHM6ICcjYXBwLXN3aXRjaGVyJwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIGlmIChOTC5BcHBTd2l0Y2hlcikgewogICAgICAgICAgICAgICAgICAgIGluaXRpYWxpc2UoKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgTkwub25Jbml0ID0gaW5pdGlhbGlzZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSh3aW5kb3cuTkwgPSAod2luZG93Lk5MIHx8IHt9KSkpOwogICAgICAgICAgICB3aW5kb3cuTkwuaXNVc2VyQWRtaW4gPSBmYWxzZTwvc2NyaXB0PjwvZGl2PjxkaXYgY2xhc3M9ImF1aS1oZWFkZXItcHJpbWFyeSI+PGgxIGlkPSJsb2dvIiBjbGFzcz0iYXVpLWhlYWRlci1sb2dvIGF1aS1oZWFkZXItbG9nby1jdXN0b20iPjxhIGhyZWY9Imh0dHBzOi8vaXNzdWVzLmFwYWNoZS5vcmcvamlyYS9zZWN1cmUvTXlKaXJhSG9tZS5qc3BhIj48aW1nIHNyYz0iL2ppcmEvcy9lbl9VSy11Z3RpbjkvNjMzMi83My9fL2ppcmEtbG9nby1zY2FsZWQucG5nIiBhbHQ9IkFTRiBKSVJBIiAvPjwvYT48L2gxPjx1bCBjbGFzcz0nYXVpLW5hdic+CgoKCgo8bGk+PGEgY2xhc3M9ImF1aS1uYXYtbGluayBhdWktZHJvcGRvd24yLWFqYXggamlyYS1hamF4LW1lbnUgYXVpLWRyb3Bkb3duMi10cmlnZ2VyICJocmVmPSIvamlyYS9zZWN1cmUvRGFzaGJvYXJkLmpzcGEiIGlkPSJob21lX2xpbmsiICBhY2Nlc3NLZXk9ImQiICB0aXRsZT0iVmlldyBhbmQgbWFuYWdlIHlvdXIgZGFzaGJvYXJkcyIgIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtb3ducz0iaG9tZV9saW5rLWNvbnRlbnQiPkRhc2hib2FyZHM8L2E+PGRpdiBpZD0iaG9tZV9saW5rLWNvbnRlbnQiIGNsYXNzPSJhdWktZHJvcGRvd24yIGF1aS1zdHlsZS1kZWZhdWx0IiBkYXRhLWF1aS1kcm9wZG93bjItYWpheC1rZXk9ImhvbWVfbGluayI+PC9kaXY+PC9saT48bGk+PGEgY2xhc3M9ImF1aS1uYXYtbGluayBhdWktZHJvcGRvd24yLWFqYXggamlyYS1hamF4LW1lbnUgYXVpLWRyb3Bkb3duMi10cmlnZ2VyICJocmVmPSIvamlyYS9icm93c2UvQUdJTEEiIGlkPSJicm93c2VfbGluayIgIGFjY2Vzc0tleT0icCIgIHRpdGxlPSJWaWV3IHJlY2VudCBwcm9qZWN0cyBhbmQgYnJvd3NlIGEgbGlzdCBvZiBwcm9qZWN0cyIgIGFyaWEtaGFzcG9wdXA9InRydWUiIGFyaWEtb3ducz0iYnJvd3NlX2xpbmstY29udGVudCI+UHJvamVjdHM8L2E+PGRpdiBpZD0iYnJvd3NlX2xpbmstY29udGVudCIgY2xhc3M9ImF1aS1kcm9wZG93bjIgYXVpLXN0eWxlLWRlZmF1bHQiIGRhdGEtYXVpLWRyb3Bkb3duMi1hamF4LWtleT0iYnJvd3NlX2xpbmsiPjwvZGl2PjwvbGk+PGxpPjxhIGNsYXNzPSJhdWktbmF2LWxpbmsgYXVpLWRyb3Bkb3duMi1hamF4IGppcmEtYWpheC1tZW51IGF1aS1kcm9wZG93bjItdHJpZ2dlciAiaHJlZj0iL2ppcmEvaXNzdWVzLyIgaWQ9ImZpbmRfbGluayIgIGFjY2Vzc0tleT0iaSIgIHRpdGxlPSJTZWFyY2ggZm9yIGlzc3VlcyBhbmQgdmlldyByZWNlbnQgaXNzdWVzIiAgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgYXJpYS1vd25zPSJmaW5kX2xpbmstY29udGVudCI+SXNzdWVzPC9hPjxkaXYgaWQ9ImZpbmRfbGluay1jb250ZW50IiBjbGFzcz0iYXVpLWRyb3Bkb3duMiBhdWktc3R5bGUtZGVmYXVsdCIgZGF0YS1hdWktZHJvcGRvd24yLWFqYXgta2V5PSJmaW5kX2xpbmsiPjwvZGl2PjwvbGk+PGxpPjxhIGNsYXNzPSJhdWktbmF2LWxpbmsgYXVpLWRyb3Bkb3duMi1hamF4IGppcmEtYWpheC1tZW51IGF1aS1kcm9wZG93bjItdHJpZ2dlciAiaHJlZj0iL2ppcmEvc2VjdXJlL0dyZWVuSG9wcGVyLmpzcGEiIGlkPSJncmVlbmhvcHBlcl9tZW51IiAgdGl0bGU9Ik1hbmFnZSB5b3VyIHByb2plY3Qgd2l0aCBKSVJBIEFnaWxlIiAgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgYXJpYS1vd25zPSJncmVlbmhvcHBlcl9tZW51LWNvbnRlbnQiPkFnaWxlPC9hPjxkaXYgaWQ9ImdyZWVuaG9wcGVyX21lbnUtY29udGVudCIgY2xhc3M9ImF1aS1kcm9wZG93bjIgYXVpLXN0eWxlLWRlZmF1bHQiIGRhdGEtYXVpLWRyb3Bkb3duMi1hamF4LWtleT0iZ3JlZW5ob3BwZXJfbWVudSI+PC9kaXY+PC9saT4KPC91bD48L2Rpdj48ZGl2IGNsYXNzPSJhdWktaGVhZGVyLXNlY29uZGFyeSI+PHVsIGNsYXNzPSdhdWktbmF2Jz48bGk+CiAgICA8Zm9ybSBhY3Rpb249Ii9qaXJhL3NlY3VyZS9RdWlja1NlYXJjaC5qc3BhIiBtZXRob2Q9InBvc3QiIGlkPSJxdWlja3NlYXJjaCIgY2xhc3M9ImF1aS1xdWlja3NlYXJjaCBkb250LWRlZmF1bHQtZm9jdXMgYWpzLWRpcnR5LXdhcm5pbmctZXhlbXB0Ij4KICAgICAgICA8aW5wdXQgaWQ9InF1aWNrU2VhcmNoSW5wdXQiIGNsYXNzPSJzZWFyY2giIHR5cGU9InRleHQiIHRpdGxlPSJTZWFyY2giIHBsYWNlaG9sZGVyPSJTZWFyY2giIG5hbWU9InNlYXJjaFN0cmluZyIgYWNjZXNzS2V5PSJxIiAvPgogICAgICAgIDxpbnB1dCB0eXBlPSJzdWJtaXQiIGNsYXNzPSJoaWRkZW4iIHZhbHVlPSJTZWFyY2giPgogICAgPC9mb3JtPgo8L2xpPgoKCgogICAgPGxpIGlkPSJzeXN0ZW0taGVscC1tZW51Ij4KICAgICAgICA8YSBjbGFzcz0iYXVpLW5hdi1saW5rIGF1aS1kcm9wZG93bjItdHJpZ2dlciIgaWQ9ImhlbHBfbWVudSIgYXJpYS1oYXNwb3B1cD0idHJ1ZSIgYXJpYS1vd25zPSJzeXN0ZW0taGVscC1tZW51LWNvbnRlbnQiIGhyZWY9Imh0dHBzOi8vZG9jcy5hdGxhc3NpYW4uY29tL2ppcmEvZG9jcy0wNjMvSklSQStEb2N1bWVudGF0aW9uIiAgdGFyZ2V0PSIkdGV4dFV0aWxzLmh0bWxFbmNvZGUoJHJvb3RIZWxwTWVudUl0ZW0ucGFyYW1zLnRhcmdldCkiICB0aXRsZT0iSGVscCI+PHNwYW4gY2xhc3M9ImF1aS1pY29uIGF1aS1pY29uLXNtYWxsIGF1aS1pY29uZm9udC1oZWxwIj5IZWxwPC9zcGFuPjwvYT4KICAgICAgICA8ZGl2IGlkPSJzeXN0ZW0taGVscC1tZW51LWNvbnRlbnQiIGNsYXNzPSJhdWktZHJvcGRvd24yIGF1aS1zdHlsZS1kZWZhdWx0Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF1aS1kcm9wZG93bjItc2VjdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dWwgaWQ9ImppcmEtaGVscCIgY2xhc3M9ImF1aS1saXN0LXRydW5jYXRlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSAgaWQ9InZpZXdfaGVscCIgICBjbGFzcz0iIiAgdGl0bGU9IkdvdG8gdGhlIG9ubGluZSBkb2N1bWVudGF0aW9uIGZvciBKSVJBIiBocmVmPSJodHRwczovL2RvY3MuYXRsYXNzaWFuLmNvbS9qaXJhL2RvY3MtMDYzL0pJUkErRG9jdW1lbnRhdGlvbiIgIHRhcmdldD0iX2JsYW5rIiA+T25saW5lIEhlbHA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSAgaWQ9ImdoX3ZpZXdfaGVscCIgICBjbGFzcz0iIiAgdGl0bGU9IkdldCBoZWxwIG9ubGluZSBmb3IgSklSQSBBZ2lsZSIgaHJlZj0iaHR0cDovL2RvY3MuYXRsYXNzaWFuLmNvbS9hZ2lsZS9kb2NzLTA2Ny9KSVJBK0FnaWxlK0RvY3VtZW50YXRpb24iICB0YXJnZXQ9Il9ibGFuayIgPkpJUkEgQWdpbGUgSGVscDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhICBpZD0ic2VydmljZS1kZXNrLXZpZXctaGVscCIgICBjbGFzcz0iIiAgdGl0bGU9IkdldCBoZWxwIG9ubGluZSBmb3IgSklSQSBTZXJ2aWNlIERlc2siIGhyZWY9Imh0dHBzOi8vY29uZmx1ZW5jZS5hdGxhc3NpYW4uY29tL2Rpc3BsYXkvU0VSVklDRURFU0svSklSQStTZXJ2aWNlK0Rlc2srRG9jdW1lbnRhdGlvbiIgIHRhcmdldD0iX2JsYW5rIiA+SklSQSBTZXJ2aWNlIERlc2sgSGVscDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhICBpZD0ia2V5c2hvcnRzY3V0aGVscCIgICBjbGFzcz0iIiAgdGl0bGU9IkdldCBtb3JlIGluZm9ybWF0aW9uIGFib3V0IEpJUkEncyBLZXlib2FyZCBTaG9ydGN1dHMiIGhyZWY9Ii9qaXJhL3NlY3VyZS9WaWV3S2V5Ym9hcmRTaG9ydGN1dHMhZGVmYXVsdC5qc3BhIiAgdGFyZ2V0PSJfYmxhbmsiID5LZXlib2FyZCBTaG9ydGN1dHM8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSAgaWQ9InZpZXdfYWJvdXQiICAgY2xhc3M9IiIgIHRpdGxlPSJHZXQgbW9yZSBpbmZvcm1hdGlvbiBhYm91dCBKSVJBIiBocmVmPSIvamlyYS9zZWN1cmUvQWJvdXRQYWdlLmpzcGEiID5BYm91dCBKSVJBPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgIGlkPSJ2aWV3X2NyZWRpdHMiICAgY2xhc3M9IiIgIHRpdGxlPSJTZWUgd2hvIGRpZCB3aGF0IiBocmVmPSIvamlyYS9zZWN1cmUvSmlyYUNyZWRpdHNQYWdlIWRlZmF1bHQuanNwYSIgIHRhcmdldD0iX2JsYW5rIiA+SklSQSBDcmVkaXRzPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgIGlkPSJ3aGF0cy1uZXctbWVudS1saW5rIiAgIGNsYXNzPSIiICAgaHJlZj0iaHR0cHM6Ly9kb2NzLmF0bGFzc2lhbi5jb20vamlyYS9kb2NzLTA2My93aGF0c25ldy9mdWxsIiA+V2hhdOKAmXMgTmV3PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgIDwvbGk+CgoKCgoKCgoKCjxsaSBpZD0idXNlci1vcHRpb25zIj4KICAgICAgICAgICAgPGEgY2xhc3M9ImF1aS1uYXYtbGluayBsb2dpbi1saW5rIiBocmVmPSIvamlyYS9sb2dpbi5qc3A/b3NfZGVzdGluYXRpb249JTJGYnJvd3NlJTJGQUdJTEEtNDQiPkxvZyBJbjwvYT4KICAgICAgICAgICAgICAgIDxkaXYgaWQ9InVzZXItb3B0aW9ucy1jb250ZW50IiBjbGFzcz0iYXVpLWRyb3Bkb3duMiBhdWktc3R5bGUtZGVmYXVsdCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdWktZHJvcGRvd24yLXNlY3Rpb24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgPC9saT4KPC91bD48L2Rpdj48L2Rpdj48IS0tIC5hdWktaGVhZGVyLWlubmVyLS0+PC9uYXY+PCEtLSAuYXVpLWhlYWRlciAtLT4KICAgIDwvaGVhZGVyPgogICAgCgoKCiAgICA8c2VjdGlvbiBpZD0iY29udGVudCIgcm9sZT0ibWFpbiI+CiAgICAgICAgCiAgICA8ZGl2IGNsYXNzPSJuYXZpZ2F0b3ItY29udGFpbmVyIGhpZGRlbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGlkZGVuIHNob3J0Y3V0LWxpbmtzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaWQ9ImVkaXQtaXNzdWUiIGNsYXNzPSJpc3N1ZWFjdGlvbi1lZGl0LWlzc3VlIiBocmVmPSIvamlyYS9zZWN1cmUvRWRpdElzc3VlIWRlZmF1bHQuanNwYT9pZD17MH0mcmV0dXJuVXJsPS9zZWN1cmUvaXNzdWVzIj48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGlkPSJhc3NpZ24taXNzdWUiIGNsYXNzPSJpc3N1ZWFjdGlvbi1hc3NpZ24taXNzdWUiIGhyZWY9Ii9qaXJhL3NlY3VyZS9Bc3NpZ25Jc3N1ZSFkZWZhdWx0LmpzcGE/aWQ9ezB9JnJldHVyblVybD0vc2VjdXJlL2lzc3VlcyI+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBpZD0iYXNzaWduLXRvLW1lIiBjbGFzcz0iaXNzdWVhY3Rpb24tYXNzaWduLXRvLW1lIGhpZGUtZnJvbS1vcHNiYXIiIGhyZWY9Ii9qaXJhL3NlY3VyZS9Bc3NpZ25Jc3N1ZS5qc3BhP2F0bF90b2tlbj1BNUtRLTJRQVYtVDRKQS1GREVEfDYwMzI5ODE0MDZiODAxZDNjYTIzMjQxZDhlZGNiYWRkYjlkN2Q4ZGZ8bG91dCZhbXA7aWQ9ezB9JmFtcDsmcmV0dXJuVXJsPS9zZWN1cmUvaXNzdWVzIj48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGlkPSJjb21tZW50LWlzc3VlIiBjbGFzcz0iaXNzdWVhY3Rpb24tY29tbWVudC1pc3N1ZSBhZGQtaXNzdWUtY29tbWVudCIgaHJlZj0iL2ppcmEvc2VjdXJlL0FkZENvbW1lbnQhZGVmYXVsdC5qc3BhP2lkPXswfSZyZXR1cm5Vcmw9L3NlY3VyZS9pc3N1ZXMiPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaWQ9ImdyZWVuaG9wcGVyLXJhcGlkYm9hcmQtb3BlcmF0aW9uIiBjbGFzcz0iaXNzdWVhY3Rpb24tZ3JlZW5ob3BwZXItcmFwaWRib2FyZC1vcGVyYXRpb24ganMtcmFwaWRib2FyZC1vcGVyYXRpb24taXNzdWUiIGhyZWY9Ii9qaXJhL3NlY3VyZS9HSEdvVG9Cb2FyZC5qc3BhP2lzc3VlSWQ9ezB9JnJldHVyblVybD0vc2VjdXJlL2lzc3VlcyI+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBpZD0iZ3JlZW5ob3BwZXItcmFuay10b3Atb3BlcmF0aW9uIiBjbGFzcz0iaXNzdWVhY3Rpb24tZ3JlZW5ob3BwZXItcmFuay10b3Atb3BlcmF0aW9uIiBocmVmPSIvamlyYS9zZWN1cmUvUmFua1RvcC5qc3BhP2lzc3VlSWQ9ezB9JnJldHVyblVybD0vc2VjdXJlL2lzc3VlcyI+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBpZD0iZ3JlZW5ob3BwZXItcmFuay1ib3R0b20tb3BlcmF0aW9uIiBjbGFzcz0iaXNzdWVhY3Rpb24tZ3JlZW5ob3BwZXItcmFuay1ib3R0b20tb3BlcmF0aW9uIiBocmVmPSIvamlyYS9zZWN1cmUvUmFua0JvdHRvbS5qc3BhP2lzc3VlSWQ9ezB9JnJldHVyblVybD0vc2VjdXJlL2lzc3VlcyI+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBpZD0ibG9nLXdvcmsiIGNsYXNzPSJpc3N1ZWFjdGlvbi1sb2ctd29yayIgaHJlZj0iL2ppcmEvc2VjdXJlL0NyZWF0ZVdvcmtsb2chZGVmYXVsdC5qc3BhP2lkPXswfSZyZXR1cm5Vcmw9L3NlY3VyZS9pc3N1ZXMiPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaWQ9ImF0dGFjaC1maWxlIiBjbGFzcz0iaXNzdWVhY3Rpb24tYXR0YWNoLWZpbGUiIGhyZWY9Ii9qaXJhL3NlY3VyZS9BdHRhY2hGaWxlIWRlZmF1bHQuanNwYT9pZD17MH0mcmV0dXJuVXJsPS9zZWN1cmUvaXNzdWVzIj48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGlkPSJhdHRhY2gtc2NyZWVuc2hvdC1odG1sNSIgY2xhc3M9Imlzc3VlYWN0aW9uLWF0dGFjaC1pbWFnZSIgaHJlZj0iL2ppcmEvc2VjdXJlL1Nob3dBdHRhY2hTY3JlZW5zaG90Rm9ybUFjdGlvbiFkZWZhdWx0LmpzcGE/aWQ9ezB9JnJldHVyblVybD0vc2VjdXJlL2lzc3VlcyI+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBpZD0idG9nZ2xlLXZvdGUtaXNzdWUiIGNsYXNzPSJpc3N1ZWFjdGlvbi12b3RlLWlzc3VlIiBocmVmPSIvamlyYS9zZWN1cmUvVm90ZU9yV2F0Y2hJc3N1ZS5qc3BhP2F0bF90b2tlbj1BNUtRLTJRQVYtVDRKQS1GREVEfDYwMzI5ODE0MDZiODAxZDNjYTIzMjQxZDhlZGNiYWRkYjlkN2Q4ZGZ8bG91dCZhbXA7aWQ9ezB9JmFtcDt2b3RlPXZvdGUmcmV0dXJuVXJsPS9zZWN1cmUvaXNzdWVzIj48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGlkPSJ0b2dnbGUtdm90ZS1pc3N1ZSIgY2xhc3M9Imlzc3VlYWN0aW9uLXVudm90ZS1pc3N1ZSIgaHJlZj0iL2ppcmEvc2VjdXJlL1ZvdGVPcldhdGNoSXNzdWUuanNwYT9hdGxfdG9rZW49QTVLUS0yUUFWLVQ0SkEtRkRFRHw2MDMyOTgxNDA2YjgwMWQzY2EyMzI0MWQ4ZWRjYmFkZGI5ZDdkOGRmfGxvdXQmYW1wO2lkPXswfSZhbXA7dm90ZT11bnZvdGUmcmV0dXJuVXJsPS9zZWN1cmUvaXNzdWVzIj48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGlkPSJ2aWV3LXZvdGVycyIgY2xhc3M9Imlzc3VlYWN0aW9uLXZpZXctdm90ZXJzIiBocmVmPSIvamlyYS9zZWN1cmUvVmlld1ZvdGVycyFkZWZhdWx0LmpzcGE/aWQ9ezB9JnJldHVyblVybD0vc2VjdXJlL2lzc3VlcyI+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBpZD0idG9nZ2xlLXdhdGNoLWlzc3VlIiBjbGFzcz0iaXNzdWVhY3Rpb24td2F0Y2gtaXNzdWUiIGhyZWY9Ii9qaXJhL3NlY3VyZS9Wb3RlT3JXYXRjaElzc3VlLmpzcGE/YXRsX3Rva2VuPUE1S1EtMlFBVi1UNEpBLUZERUR8NjAzMjk4MTQwNmI4MDFkM2NhMjMyNDFkOGVkY2JhZGRiOWQ3ZDhkZnxsb3V0JmFtcDtpZD17MH0mYW1wO3dhdGNoPXdhdGNoJnJldHVyblVybD0vc2VjdXJlL2lzc3VlcyI+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBpZD0idG9nZ2xlLXdhdGNoLWlzc3VlIiBjbGFzcz0iaXNzdWVhY3Rpb24tdW53YXRjaC1pc3N1ZSIgaHJlZj0iL2ppcmEvc2VjdXJlL1ZvdGVPcldhdGNoSXNzdWUuanNwYT9hdGxfdG9rZW49QTVLUS0yUUFWLVQ0SkEtRkRFRHw2MDMyOTgxNDA2YjgwMWQzY2EyMzI0MWQ4ZWRjYmFkZGI5ZDdkOGRmfGxvdXQmYW1wO2lkPXswfSZhbXA7d2F0Y2g9dW53YXRjaCZyZXR1cm5Vcmw9L3NlY3VyZS9pc3N1ZXMiPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaWQ9Im1hbmFnZS13YXRjaGVycyIgY2xhc3M9Imlzc3VlYWN0aW9uLW1hbmFnZS13YXRjaGVycyIgaHJlZj0iL2ppcmEvc2VjdXJlL01hbmFnZVdhdGNoZXJzIWRlZmF1bHQuanNwYT9pZD17MH0mcmV0dXJuVXJsPS9zZWN1cmUvaXNzdWVzIj48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGlkPSJjcmVhdGUtc3VidGFzayIgY2xhc3M9Imlzc3VlYWN0aW9uLWNyZWF0ZS1zdWJ0YXNrIiBocmVmPSIvamlyYS9zZWN1cmUvQ3JlYXRlU3ViVGFza0lzc3VlIWRlZmF1bHQuanNwYT9wYXJlbnRJc3N1ZUlkPXswfSZyZXR1cm5Vcmw9L3NlY3VyZS9pc3N1ZXMiPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaWQ9InN1YnRhc2stdG8taXNzdWUiIGNsYXNzPSJpc3N1ZWFjdGlvbi1zdWJ0YXNrLXRvLWlzc3VlIiBocmVmPSIvamlyYS9zZWN1cmUvQ29udmVydFN1YlRhc2suanNwYT9pZD17MH0mcmV0dXJuVXJsPS9zZWN1cmUvaXNzdWVzIj48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGlkPSJpc3N1ZS10by1zdWJ0YXNrIiBjbGFzcz0iaXNzdWVhY3Rpb24taXNzdWUtdG8tc3VidGFzayIgaHJlZj0iL2ppcmEvc2VjdXJlL0NvbnZlcnRJc3N1ZS5qc3BhP2lkPXswfSZyZXR1cm5Vcmw9L3NlY3VyZS9pc3N1ZXMiPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaWQ9ImN0YS1jcmVhdGUtYnJhbmNoIiBjbGFzcz0iZGV2c3RhdHVzLWN0YS1saW5rIiBocmVmPSIjZGV2c3RhdHVzLmN0YS5jcmVhdGVicmFuY2gmcmV0dXJuVXJsPS9zZWN1cmUvaXNzdWVzIj48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGlkPSJtb3ZlLWlzc3VlIiBjbGFzcz0iaXNzdWVhY3Rpb24tbW92ZS1pc3N1ZSIgaHJlZj0iL2ppcmEvc2VjdXJlL01vdmVJc3N1ZSFkZWZhdWx0LmpzcGE/aWQ9ezB9JnJldHVyblVybD0vc2VjdXJlL2lzc3VlcyI+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBpZD0ibW92ZS1pc3N1ZSIgY2xhc3M9Imlzc3VlYWN0aW9uLW1vdmUtc3VidGFzayIgaHJlZj0iL2ppcmEvc2VjdXJlL01vdmVTdWJUYXNrQ2hvb3NlT3BlcmF0aW9uIWRlZmF1bHQuanNwYT9pZD17MH0mcmV0dXJuVXJsPS9zZWN1cmUvaXNzdWVzIj48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGlkPSJsaW5rLWlzc3VlIiBjbGFzcz0iaXNzdWVhY3Rpb24tbGluay1pc3N1ZSIgaHJlZj0iL2ppcmEvc2VjdXJlL0xpbmtKaXJhSXNzdWUhZGVmYXVsdC5qc3BhP2lkPXswfSZyZXR1cm5Vcmw9L3NlY3VyZS9pc3N1ZXMiPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaWQ9ImNsb25lLWlzc3VlIiBjbGFzcz0iaXNzdWVhY3Rpb24tY2xvbmUtaXNzdWUiIGhyZWY9Ii9qaXJhL3NlY3VyZS9DbG9uZUlzc3VlRGV0YWlscyFkZWZhdWx0LmpzcGE/aWQ9ezB9JnJldHVyblVybD0vc2VjdXJlL2lzc3VlcyI+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBpZD0iZWRpdC1sYWJlbHMiIGNsYXNzPSJpc3N1ZWFjdGlvbi1lZGl0LWxhYmVscyIgaHJlZj0iL2ppcmEvc2VjdXJlL0VkaXRMYWJlbHMhZGVmYXVsdC5qc3BhP2lkPXswfSZyZXR1cm5Vcmw9L3NlY3VyZS9pc3N1ZXMiPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaWQ9ImRlbGV0ZS1pc3N1ZSIgY2xhc3M9Imlzc3VlYWN0aW9uLWRlbGV0ZS1pc3N1ZSIgaHJlZj0iL2ppcmEvc2VjdXJlL0RlbGV0ZUlzc3VlIWRlZmF1bHQuanNwYT9pZD17MH0mcmV0dXJuVXJsPS9zZWN1cmUvaXNzdWVzIj48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAKICAgICAgICA8ZGl2IGlkPSJ1c2VyLXBhcm1zIiBzdHlsZT0iZGlzcGxheTpub25lOyIgZGF0YS11c2VyLXBhcm1zPSJ7JnF1b3Q7Y3JlYXRlU2hhcmVkT2JqZWN0cyZxdW90OzpmYWxzZSwmcXVvdDtjcmVhdGVJc3N1ZSZxdW90OzpmYWxzZX0iPjwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJuYXZpZ2F0b3Itc2lkZWJhciIgaWQ9Im5hdmlnYXRvci1zaWRlYmFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBzdHlsZT0id2lkdGg6MTgwcHgiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8c2NyaXB0IHR5cGU9InRleHQvamF2YXNjcmlwdCI+CiAgICAgICAgICAgIChmdW5jdGlvbigpIHsKICAgICAgICAgICAgICAgIHZhciBuYXZpZ2F0b3JTaWRlYmFyRWxlbWVudCA9IGpRdWVyeSgiLm5hdmlnYXRvci1zaWRlYmFyIik7CiAgICAgICAgICAgICAgICBpZiAoSklSQS5Jc3N1ZXMuRmlsdGVyUGFuZWxNb2RlbCkgewogICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvclNpZGViYXJFbGVtZW50LnRvZ2dsZUNsYXNzKCJjb2xsYXBzZWQiLCAhSklSQS5Jc3N1ZXMuRmlsdGVyUGFuZWxNb2RlbC5wcm90b3R5cGUuaXNFeHBhbmRlZCgpKQogICAgICAgICAgICAgICAgICAgIGlmIChKSVJBLklzc3Vlcy5GaWx0ZXJQYW5lbE1vZGVsLnByb3RvdHlwZS5pc0V4cGFuZGVkKCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmF2aWdhdG9yU2lkZWJhckVsZW1lbnQud2lkdGgoSklSQS5Jc3N1ZXMuRmlsdGVyUGFuZWxNb2RlbC5wcm90b3R5cGUuZ2V0V2lkdGgoKSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSgpOwogICAgICAgIDwvc2NyaXB0PgogICAgICAgIDxkaXYgY2xhc3M9Im5hdmlnYXRvci1ib2R5Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVkLWNvbnRlbnQiPgoKICAgICAgICAgICAgICAgIDxoZWFkZXIgY2xhc3M9InNhdmVkLXNlYXJjaC1zZWxlY3RvciI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2F2ZWQtc2VhcmNoLW9wZXJhdGlvbnMiPgogICAgICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9Im9wZXJhdGlvbnMiPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9ImF1aS1kZC1wYXJlbnQiPjxhIGhyZWY9IiMiIGNsYXNzPSJoZWFkZXItdmlld3MgaGVhZGVyLW9wZXJhdGlvbnMgYXVpLWRyb3Bkb3duLXRyaWdnZXIgYXVpLWRkLWxpbmsgc3RhbmRhcmQgaWNvbi1leHBvcnQgbG5rIiB0aXRsZT0iRXhwb3J0IHRoaXMgZmlsdGVyIGluIGFub3RoZXIgZm9ybWF0IiByb2xlPSJidXR0b24iPjxzcGFuPkV4cG9ydDwvc3Bhbj48L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYXVpLWRkLXBhcmVudCI+PGEgaHJlZj0iIyIgY2xhc3M9ImhlYWRlci10b29scyBoZWFkZXItb3BlcmF0aW9ucyBhdWktZHJvcGRvd24tdHJpZ2dlciBhdWktZGQtbGluayBzdGFuZGFyZCBpY29uLXRvb2xzIiB0aXRsZT0iU2VsZWN0IG9wZXJhdGlvbnMgdGhhdCBjYW4gYmUgY29tcGxldGVkIiByb2xlPSJidXR0b24iPjxzcGFuPlRvb2xzPC9zcGFuPjwvYT48L2xpPgoKICAgICAgICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaGlkZGVuIG9wZXJhdGlvbnMtdmlldy1kYXRhIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmaWVsZHNldCBjbGFzcz0iaGlkZGVuIHBhcmFtZXRlcnMiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9maWVsZHNldD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gaWQ9InRocm9iYmVyLXNwYWNlIiBjbGFzcz0iaWNvbiB0aHJvYmJlciI+PC9zcGFuPgogICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9InNlYXJjaC1oZWFkZXItdmlldyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoMSBjbGFzcz0ic2VhcmNoLXRpdGxlIj48L2gxPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9oZWFkZXI+CiAgICAgICAgICAgICAgICA8Zm9ybSBjbGFzcz0ibmF2aWdhdG9yLXNlYXJjaCI+PC9mb3JtPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibmF2aWdhdG9yLWdyb3VwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJlc3VsdHMtcGFuZWwgbmF2aWdhdG9yLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYXZpZ2F0b3ItY29udGVudCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWlzc3VlLXRhYmxlLW1vZGVsLXN0YXRlPSIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1zZXNzaW9uLXNlYXJjaC1zdGF0ZT0iIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtc2VsZWN0ZWQtaXNzdWU9InsmcXVvdDtpZCZxdW90OzoxMjMzMDczNywmcXVvdDtrZXkmcXVvdDs6JnF1b3Q7QUdJTEEtNDQmcXVvdDt9Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9Imlzc3VlLWNvbnRhaW5lciAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJpc3N1ZS1jb250ZW50IiBjbGFzcz0iaXNzdWUtZWRpdC1mb3JtIj4KICAgICAgICAgICAgICAgICAgICA8aGVhZGVyIGlkPSJzdGFsa2VyIiBjbGFzcz0iaXNzdWUtaGVhZGVyIGpzLXN0YWxrZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpc3N1ZS1oZWFkZXItY29udGVudCI+PGhlYWRlciBjbGFzcz0iYXVpLXBhZ2UtaGVhZGVyIj48ZGl2IGNsYXNzPSJhdWktcGFnZS1oZWFkZXItaW5uZXIiPjxkaXYgY2xhc3M9ImF1aS1wYWdlLWhlYWRlci1pbWFnZSI+PHNwYW4gaWQ9IjEwNzMwIiBjbGFzcz0iYXVpLWF2YXRhciBhdWktYXZhdGFyLWxhcmdlIGF1aS1hdmF0YXItcHJvamVjdCBqaXJhLXN5c3RlbS1hdmF0YXIiPjxzcGFuIGNsYXNzPSJhdWktYXZhdGFyLWlubmVyIj48aW1nIGlkPSJwcm9qZWN0LWF2YXRhciIgYWx0PSIgQWdpbGEiIHNyYz0iaHR0cHM6Ly9pc3N1ZXMuYXBhY2hlLm9yZy9qaXJhL3NlY3VyZS9wcm9qZWN0YXZhdGFyP3BpZD0xMDczMCZhbXA7YXZhdGFySWQ9MTAwMTEiIC8+PC9zcGFuPjwvc3Bhbj48L2Rpdj48IS0tIC5hdWktcGFnZS1oZWFkZXItaW1hZ2UgLS0+PGRpdiBjbGFzcz0iYXVpLXBhZ2UtaGVhZGVyLW1haW4iPjxvbCBjbGFzcz0iYXVpLW5hdiBhdWktbmF2LWJyZWFkY3J1bWJzIj48bGk+PGEgaWQ9InByb2plY3QtbmFtZS12YWwiIGhyZWY9Ii9qaXJhL2Jyb3dzZS9BR0lMQSI+IEFnaWxhPC9hPjwvbGk+PGxpPjxhIGNsYXNzPSJpc3N1ZS1saW5rIiBkYXRhLWlzc3VlLWtleT0iQUdJTEEtNDQiIGhyZWY9Ii9qaXJhL2Jyb3dzZS9BR0lMQS00NCIgaWQ9ImtleS12YWwiIHJlbD0iMTIzMzA3MzciPkFHSUxBLTQ0PC9hPjwvbGk+PC9vbD48aDEgaWQ9InN1bW1hcnktdmFsIj5PcHRpb24gdG8gdXNlIEpTUCBJbmNsdWRlcyBmb3IgcmVuZGVyaW5nIGZvcm1zIGZvciBUYXNrIG5vZGVzLjwvaDE+PC9kaXY+PCEtLSAuYXVpLXBhZ2UtaGVhZGVyLW1haW4gLS0+PGRpdiBjbGFzcz0iYXVpLXBhZ2UtaGVhZGVyLWFjdGlvbnMiPjxkaXYgaWQ9Imlzc3VlLWhlYWRlci1wYWdlciI+PC9kaXY+PC9kaXY+PCEtLSAuYXVpLXBhZ2UtaGVhZGVyLWFjdGlvbnMgLS0+PC9kaXY+PCEtLSAuYXVpLXBhZ2UtaGVhZGVyLWlubmVyIC0tPjwvaGVhZGVyPjwhLS0gLmF1aS1wYWdlLWhlYWRlciAtLT48ZGl2IGNsYXNzPSJjb21tYW5kLWJhciI+PGRpdiBjbGFzcz0ib3BzLWNvbnQiPjxkaXYgY2xhc3M9Im9wcy1tZW51cyBhdWktdG9vbGJhciI+PGRpdiBjbGFzcz0idG9vbGJhci1zcGxpdCB0b29sYmFyLXNwbGl0LWxlZnQiPjx1bCBpZD0ib3BzYmFyLW9wc2Jhci1vcGVyYXRpb25zIiBjbGFzcz0idG9vbGJhci1ncm91cCBwbHVnZ2FibGUtb3BzIj48bGkgY2xhc3M9InRvb2xiYXItaXRlbSI+PGEgaWQ9ImdyZWVuaG9wcGVyLXJhcGlkYm9hcmQtb3BlcmF0aW9uInRpdGxlPSJWaWV3IHRoaXMgaXNzdWUgb24gYW4gQWdpbGUgYm9hcmQiY2xhc3M9InRvb2xiYXItdHJpZ2dlciBpc3N1ZWFjdGlvbi1ncmVlbmhvcHBlci1yYXBpZGJvYXJkLW9wZXJhdGlvbiBqcy1yYXBpZGJvYXJkLW9wZXJhdGlvbi1pc3N1ZSIgaHJlZj0iL2ppcmEvc2VjdXJlL0dIR29Ub0JvYXJkLmpzcGE/aXNzdWVJZD0xMjMzMDczNyI+PHNwYW4gY2xhc3M9InRyaWdnZXItbGFiZWwiPkFnaWxlIEJvYXJkPC9zcGFuPjwvYT48L2xpPjwvdWw+PHVsIGlkPSJvcHNiYXItb3BzYmFyLXRyYW5zaXRpb25zIiBjbGFzcz0idG9vbGJhci1ncm91cCBwbHVnZ2FibGUtb3BzIj48L3VsPjx1bCBpZD0ib3BzYmFyLW9wc2Jhci1hZG1pbiIgY2xhc3M9InRvb2xiYXItZ3JvdXAgcGx1Z2dhYmxlLW9wcyI+PC91bD48L2Rpdj48ZGl2IGNsYXNzPSJ0b29sYmFyLXNwbGl0IHRvb2xiYXItc3BsaXQtcmlnaHQiPjx1bCBpZD0ib3BzYmFyLWppcmEuaXNzdWUudG9vbHMiIGNsYXNzPSJ0b29sYmFyLWdyb3VwIHBsdWdnYWJsZS1vcHMiPjxsaSBjbGFzcz0idG9vbGJhci1pdGVtIHRvb2xiYXItZHJvcGRvd24iPjxkaXY+PGEgaHJlZj0iIyIgIGlkPSJ2aWV3aXNzdWUtZXhwb3J0InRpdGxlPSJFeHBvcnQgdGhpcyBpc3N1ZSBpbiBhbm90aGVyIGZvcm1hdCIgZGF0YS1oaWRlLW9uLXNjcm9sbD0iLnNwbGl0LXZpZXcgLmlzc3VlLWNvbnRhaW5lciIgZGF0YS1jb250YWluLXRvLXdpbmRvdz0idHJ1ZSIgY2xhc3M9InRvb2xiYXItdHJpZ2dlciAganMtZGVmYXVsdC1kcm9wZG93biIgPjxzcGFuIGNsYXNzPSJpY29uIGljb24tZXhwb3J0IHZpZXdpc3N1ZS1leHBvcnQiPjwvc3Bhbj4gPHNwYW4gY2xhc3M9ImRyb3Bkb3duLXRleHQiPkV4cG9ydDwvc3Bhbj48c3BhbiBjbGFzcz0iaWNvbiBkcm9wLW1lbnUiPjwvc3Bhbj48L2E+PGRpdiBjbGFzcz0iYXVpLWxpc3QgaGlkZGVuIj48dWwgY2xhc3M9ImF1aS1saXN0LXNlY3Rpb24gYXVpLWZpcnN0IGF1aS1sYXN0Ij48bGkgY2xhc3M9ImF1aS1saXN0LWl0ZW0iPjxhICBocmVmPSIvamlyYS9zaS9qaXJhLmlzc3Vldmlld3M6aXNzdWUteG1sL0FHSUxBLTQ0L0FHSUxBLTQ0LnhtbCIgY2xhc3M9ImF1aS1saXN0LWl0ZW0tbGluayJpZD0iamlyYS5pc3N1ZXZpZXdzOmlzc3VlLXhtbCI+PHNwYW4gY2xhc3M9InRyaWdnZXItbGFiZWwiPlhNTDwvc3Bhbj48L2E+PC9saT48bGkgY2xhc3M9ImF1aS1saXN0LWl0ZW0iPjxhICBocmVmPSIvamlyYS9zaS9qaXJhLmlzc3Vldmlld3M6aXNzdWUtd29yZC9BR0lMQS00NC9BR0lMQS00NC5kb2MiIGNsYXNzPSJhdWktbGlzdC1pdGVtLWxpbmsiaWQ9ImppcmEuaXNzdWV2aWV3czppc3N1ZS13b3JkIj48c3BhbiBjbGFzcz0idHJpZ2dlci1sYWJlbCI+V29yZDwvc3Bhbj48L2E+PC9saT48bGkgY2xhc3M9ImF1aS1saXN0LWl0ZW0iPjxhICBocmVmPSIvamlyYS9zaS9qaXJhLmlzc3Vldmlld3M6aXNzdWUtaHRtbC9BR0lMQS00NC9BR0lMQS00NC5odG1sIiBjbGFzcz0iYXVpLWxpc3QtaXRlbS1saW5rImlkPSJqaXJhLmlzc3Vldmlld3M6aXNzdWUtaHRtbCI+PHNwYW4gY2xhc3M9InRyaWdnZXItbGFiZWwiPlByaW50YWJsZTwvc3Bhbj48L2E+PC9saT48L3VsPjwvZGl2PjwvZGl2PjwvbGk+PC91bD48L2Rpdj48L2Rpdj48L2Rpdj48L2Rpdj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2hlYWRlcj4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpc3N1ZS1ib2R5LWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdWktZ3JvdXAgaXNzdWUtYm9keSI+PGRpdiBjbGFzcz0iYXVpLWl0ZW0gaXNzdWUtbWFpbi1jb2x1bW4iPjxkaXYgaWQ9ZGV0YWlscy1tb2R1bGUgY2xhc3M9Im1vZHVsZSB0b2dnbGUtd3JhcCI+PGRpdiBpZD0iZGV0YWlscy1tb2R1bGVfaGVhZGluZyIgY2xhc3M9Im1vZC1oZWFkZXIiPjx1bCBjbGFzcz0ib3BzIj48L3VsPjxoMiBjbGFzcz0idG9nZ2xlLXRpdGxlIj5EZXRhaWxzPC9oMj48L2Rpdj48ZGl2IGNsYXNzPSJtb2QtY29udGVudCI+CgoKCgo8dWwgaWQ9Imlzc3VlZGV0YWlscyIgY2xhc3M9InByb3BlcnR5LWxpc3QgdHdvLWNvbHMiPgogICAgPGxpIGNsYXNzPSJpdGVtIj4KICAgICAgICA8ZGl2IGNsYXNzPSJ3cmFwIj4KICAgICAgICAgICAgPHN0cm9uZyBjbGFzcz0ibmFtZSI+VHlwZTo8L3N0cm9uZz4KICAgICAgICAgICAgPHNwYW4gaWQ9InR5cGUtdmFsIiBjbGFzcz0idmFsdWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgIGFsdD0iTmV3IEZlYXR1cmUiIGhlaWdodD0iMTYiIHNyYz0iL2ppcmEvaW1hZ2VzL2ljb25zL2lzc3VldHlwZXMvbmV3ZmVhdHVyZS5wbmciIHRpdGxlPSJOZXcgRmVhdHVyZSAtIEEgbmV3IGZlYXR1cmUgb2YgdGhlIHByb2R1Y3QsIHdoaWNoIGhhcyB5ZXQgdG8gYmUgZGV2ZWxvcGVkLiIgd2lkdGg9IjE2IiAvPiBOZXcgRmVhdHVyZQogICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgPC9kaXY+CiAgICA8L2xpPgogICAgPGxpIGNsYXNzPSJpdGVtIGl0ZW0tcmlnaHQiPgogICAgICAgIDxkaXYgY2xhc3M9IndyYXAiPgogICAgICAgICAgICA8c3Ryb25nIGNsYXNzPSJuYW1lIj5TdGF0dXM6PC9zdHJvbmc+CiAgICAgICAgICAgIDxzcGFuIGlkPSJzdGF0dXMtdmFsIiBjbGFzcz0idmFsdWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSIgamlyYS1pc3N1ZS1zdGF0dXMtbG96ZW5nZSBhdWktbG96ZW5nZSBqaXJhLWlzc3VlLXN0YXR1cy1sb3plbmdlLWJsdWUtZ3JheSBqaXJhLWlzc3VlLXN0YXR1cy1sb3plbmdlLW5ldyBqaXJhLWlzc3VlLXN0YXR1cy1sb3plbmdlLW1heC13aWR0aC1tZWRpdW0iIGRhdGEtdG9vbHRpcD0iJmx0O3NwYW4gY2xhc3M9JnF1b3Q7amlyYS1pc3N1ZS1zdGF0dXMtdG9vbHRpcC10aXRsZSZxdW90OyZndDtPcGVuJmx0Oy9zcGFuJmd0OyZsdDticiZndDsmbHQ7c3BhbiBjbGFzcz0mcXVvdDtqaXJhLWlzc3VlLXN0YXR1cy10b29sdGlwLWRlc2MmcXVvdDsmZ3Q7VGhlIGlzc3VlIGlzIG9wZW4gYW5kIHJlYWR5IGZvciB0aGUgYXNzaWduZWUgdG8gc3RhcnQgd29yayBvbiBpdC4mbHQ7L3NwYW4mZ3Q7Ij5PcGVuPC9zcGFuPiAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0iaXRlbSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9IndyYXAiPgogICAgICAgICAgICAgICAgPHN0cm9uZyBjbGFzcz0ibmFtZSI+UHJpb3JpdHk6PC9zdHJvbmc+CiAgICAgICAgICAgICAgICA8c3BhbiBpZD0icHJpb3JpdHktdmFsIiBjbGFzcz0idmFsdWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyAgYWx0PSJNYWpvciIgaGVpZ2h0PSIxNiIgc3JjPSIvamlyYS9pbWFnZXMvaWNvbnMvcHJpb3JpdGllcy9tYWpvci5wbmciIHRpdGxlPSJNYWpvciAtIE1ham9yIGxvc3Mgb2YgZnVuY3Rpb24uIiB3aWR0aD0iMTYiIC8+IE1ham9yCiAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJpdGVtIGl0ZW0tcmlnaHQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cmFwIj4KICAgICAgICAgICAgICAgIDxzdHJvbmcgY2xhc3M9Im5hbWUiPlJlc29sdXRpb246PC9zdHJvbmc+CiAgICAgICAgICAgICAgICA8c3BhbiBpZD0icmVzb2x1dGlvbi12YWwiIGNsYXNzPSJ2YWx1ZSB1bnJlc29sdmVkIiA+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVucmVzb2x2ZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Iml0ZW0iPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cmFwIj4KICAgICAgICAgICAgICAgIDxzdHJvbmcgY2xhc3M9Im5hbWUiPkFmZmVjdHMgVmVyc2lvbi9zOjwvc3Ryb25nPgogICAgICAgICAgICAgICAgPHNwYW4gaWQ9InZlcnNpb25zLXZhbCIgY2xhc3M9InZhbHVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOb25lCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iaXRlbSBpdGVtLXJpZ2h0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0id3JhcCI+CiAgICAgICAgICAgICAgICA8c3Ryb25nIGNsYXNzPSJuYW1lIj5GaXggVmVyc2lvbi9zOjwvc3Ryb25nPgogICAgICAgICAgICAgICAgPHNwYW4gaWQ9ImZpeGZvci12YWwiIGNsYXNzPSJ2YWx1ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTm9uZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Iml0ZW0iPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cmFwIj4KICAgICAgICAgICAgICAgIDxzdHJvbmcgY2xhc3M9Im5hbWUiPkNvbXBvbmVudC9zOjwvc3Ryb25nPgogICAgICAgICAgICAgICAgPHNwYW4gaWQ9ImNvbXBvbmVudHMtdmFsIiBjbGFzcz0idmFsdWUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJzaG9ydGVuIiBpZD0iY29tcG9uZW50cy1maWVsZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9qaXJhL2Jyb3dzZS9BR0lMQS9jb21wb25lbnQvMTIzMTAxOTEiIHRpdGxlPSJCUE0gQ29uc29sZSBBIHdlYiBhcHBsaWNhdGlvbiB0aGF0IHVzZXMgdGhlIGZ1bmN0aW9uYWxpdHkgb2YgdGhlIEJQTSBFbmdpbmUuIj5CUE0gQ29uc29sZTwvYT4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJpdGVtIGZ1bGwtd2lkdGgiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cmFwIiBpZD0id3JhcC1sYWJlbHMiPgogICAgICAgICAgICAgICAgPHN0cm9uZyBjbGFzcz0ibmFtZSI+TGFiZWxzOjwvc3Ryb25nPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxhYmVscy13cmFwIHZhbHVlIj4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImxhYmVscyIgaWQ9ImxhYmVscy0xMjMzMDczNy12YWx1ZSI+Tm9uZTwvc3Bhbj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2xpPgogICAgICAgIDwvdWw+Cgo8L2Rpdj48L2Rpdj48ZGl2IGlkPWRlc2NyaXB0aW9ubW9kdWxlIGNsYXNzPSJtb2R1bGUgdG9nZ2xlLXdyYXAiPjxkaXYgaWQ9ImRlc2NyaXB0aW9ubW9kdWxlX2hlYWRpbmciIGNsYXNzPSJtb2QtaGVhZGVyIj48dWwgY2xhc3M9Im9wcyI+PC91bD48aDIgY2xhc3M9InRvZ2dsZS10aXRsZSI+RGVzY3JpcHRpb248L2gyPjwvZGl2PjxkaXYgY2xhc3M9Im1vZC1jb250ZW50Ij48ZGl2IGlkPSJkZXNjcmlwdGlvbi12YWwiIGNsYXNzPSJmaWVsZC1pZ25vcmUtaGlnaGxpZ2h0Ij4KICAgIDxkaXYgY2xhc3M9InVzZXItY29udGVudC1ibG9jayI+CiAgICAgICAgICAgICAgICAgICAgPHA+VGhlIGV4aXN0aW5nIEhUVFBSZW5kZXJlciB1c2VkIGluIHRoZSBzYW1wbGUgd2ViYXBwIG9ubHkgc3VwcG9ydHMgcmV0dXJuaW5nIHRoZSBodG1sIG9mIHRoZSBmb3JtIGFzIGEgU3RyaW5nLiAgVGhpcyBsZWFkcyB0byBhbiB1Z2x5IFN0cmluZ0J1ZmZlciBleGVyY2lzZSBpbiB0aGUgc2FtcGxlIExlYXZlQXBwbGljYXRpb24gcHJvY2VzcyBhcyBub3RlZCBpbiB0aGUgY29kZS4gIDwvcD4KCjxwPlRoZSBmaXJzdCBwYXRjaCBwcm92aWRlcyBhbiBhbHRlcm5hdGUgcmVuZGVyZXIgYW5kIGFkanVzdHMgdGhlIGV4aXN0aW5nIHJlbmRlcmluZyBtZWNoYW5pc20gdG8gYWNjb3VudCBmb3IgdGhlIG5ldyBvcHRpb24uICA8L3A+Cgo8cD5UaGUgc2Vjb25kIHBhdGNoIHRha2VzIGEgZGlmZmVyZW50IGFwcHJvYWNoIGFuZCBjYW4gcmVwbGFjZSB0aGUgZmlyc3QuICBJdCB1c2VzIFJlcXVlc3REaXNwYXRjaGVyLmluY2x1ZGUgaW4gdGhlIHRhc2sncyByZW5kZXIgbWV0aG9kIHRvIGFjY29tcGxpc2ggdGhlIHNhbWUgZ29hbCwgYW5kIGFsc28gYWxsb3dzIGZhbGwgYmFjayBiZWhhdmlvciBmb3IgdGFza3MgdGhhdCB3aXNoIHRvIGdlbmVyYXRlIHRoZSBmb3JtIGh0bWwgYXMgYSBzdHJpbmcgdXNpbmcgc29tZSBvdGhlciBtZXRob2QuICBJdCB1c2VzIGxlc3Mgb3ZlcmFsbCBjb2RlLCBidXQgZG9lcyByZWx5IG9uIHNlcnZsZXQgc3BlYyAyLjQgKGFnaWxhIGJwbSBzZWVtcyB0byBhbHJlYWR5IGRlcGVuZCBvbiAyLjQgYW55d2F5KS4gIDwvcD4KICAgICAgICAgICAgPC9kaXY+CjwvZGl2Pgo8L2Rpdj48L2Rpdj48ZGl2IGlkPWF0dGFjaG1lbnRtb2R1bGUgY2xhc3M9Im1vZHVsZSB0b2dnbGUtd3JhcCI+PGRpdiBpZD0iYXR0YWNobWVudG1vZHVsZV9oZWFkaW5nIiBjbGFzcz0ibW9kLWhlYWRlciI+PHVsIGNsYXNzPSJvcHMiPjxsaSBjbGFzcz0iZHJvcCI+PGRpdiBjbGFzcz0iYXVpLWRkLXBhcmVudCI+PGEgaHJlZj0iIyIgY2xhc3M9Imljb24gZHJvcC1tZW51IGpzLWRlZmF1bHQtZHJvcGRvd24iIHRpdGxlPSJPcHRpb25zIj48c3Bhbj5PcHRpb25zPC9zcGFuPjwvYT48ZGl2IGNsYXNzPSJhdWktZHJvcGRvd24tY29udGVudCBhdWktbGlzdCI+PHVsIGlkPSJhdHRhY2htZW50LXNvcnRpbmctb3B0aW9ucyJjbGFzcz0iYXVpLWxpc3Qtc2VjdGlvbiBhdWktZmlyc3QiPjxsaSBjbGFzcz0iYXVpLWxpc3QtaXRlbSI+PGEgaWQ9ImF0dGFjaG1lbnQtc29ydC1rZXktbmFtZSJocmVmPSIvamlyYS9icm93c2UvQUdJTEEtNDQ/YXR0YWNobWVudFNvcnRCeT1maWxlTmFtZSNhdHRhY2htZW50bW9kdWxlImNsYXNzPSJhdWktbGlzdC1jaGVja2VkIGF1aS1jaGVja2VkIGF1aS1saXN0LWl0ZW0tbGluayJ0aXRsZT0idmlld2lzc3VlLnN1YnRhc2tzLnRhYi5zaG93LmFsbC5uYW1lIj48c3Bhbj5Tb3J0IEJ5IE5hbWU8L3NwYW4+PC9hPjwvbGk+PGxpIGNsYXNzPSJhdWktbGlzdC1pdGVtIj48YSBpZD0iYXR0YWNobWVudC1zb3J0LWtleS1kYXRlImhyZWY9Ii9qaXJhL2Jyb3dzZS9BR0lMQS00ND9hdHRhY2htZW50U29ydEJ5PWRhdGVUaW1lI2F0dGFjaG1lbnRtb2R1bGUiY2xhc3M9ImF1aS1saXN0LWNoZWNrZWQgYXVpLWxpc3QtaXRlbS1saW5rInRpdGxlPSJTb3J0IEJ5IERhdGUiPjxzcGFuPlNvcnQgQnkgRGF0ZTwvc3Bhbj48L2E+PC9saT48L3VsPjx1bCBpZD0iYXR0YWNobWVudC1zb3J0aW5nLW9yZGVyLW9wdGlvbnMiY2xhc3M9ImF1aS1saXN0LXNlY3Rpb24gYXVpLWxhc3QiPjxsaSBjbGFzcz0iYXVpLWxpc3QtaXRlbSI+PGEgaWQ9ImF0dGFjaG1lbnQtc29ydC1kaXJlY3Rpb24tYXNjImhyZWY9Ii9qaXJhL2Jyb3dzZS9BR0lMQS00ND9hdHRhY2htZW50T3JkZXI9YXNjI2F0dGFjaG1lbnRtb2R1bGUiY2xhc3M9ImF1aS1saXN0LWNoZWNrZWQgYXVpLWNoZWNrZWQgYXVpLWxpc3QtaXRlbS1saW5rInRpdGxlPSJBc2NlbmRpbmciPjxzcGFuPkFzY2VuZGluZzwvc3Bhbj48L2E+PC9saT48bGkgY2xhc3M9ImF1aS1saXN0LWl0ZW0iPjxhIGlkPSJhdHRhY2htZW50LXNvcnQtZGlyZWN0aW9uLWRlc2MiaHJlZj0iL2ppcmEvYnJvd3NlL0FHSUxBLTQ0P2F0dGFjaG1lbnRPcmRlcj1kZXNjI2F0dGFjaG1lbnRtb2R1bGUiY2xhc3M9ImF1aS1saXN0LWNoZWNrZWQgYXVpLWxpc3QtaXRlbS1saW5rInRpdGxlPSJEZXNjZW5kaW5nIj48c3Bhbj5EZXNjZW5kaW5nPC9zcGFuPjwvYT48L2xpPjwvdWw+PC9kaXY+PC9kaXY+PC9saT48L3VsPjxoMiBjbGFzcz0idG9nZ2xlLXRpdGxlIj5BdHRhY2htZW50czwvaDI+PC9kaXY+PGRpdiBjbGFzcz0ibW9kLWNvbnRlbnQiPgogICAgICAgICAgICA8b2wgaWQ9ImZpbGVfYXR0YWNobWVudHMiIGNsYXNzPSJpdGVtLWF0dGFjaG1lbnRzIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iYXR0YWNobWVudC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJhdHRhY2htZW50LXRodW1iIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9qaXJhL3NlY3VyZS9hdHRhY2htZW50LzEyMzI0NjA3L2pzcEluY2x1ZGVGb3JtLnBhdGNoIiBkcmFnZ2FibGU9InRydWUiIGRhdGEtZG93bmxvYWR1cmw9IiR7ZmlsZUF0dGFjaG1lbnQubWltZXR5cGV9OmpzcEluY2x1ZGVGb3JtLnBhdGNoOmh0dHBzOi8vaXNzdWVzLmFwYWNoZS5vcmcvamlyYS9zZWN1cmUvYXR0YWNobWVudC8xMjMyNDYwNy9qc3BJbmNsdWRlRm9ybS5wYXRjaCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIvamlyYS9pbWFnZXMvaWNvbnMvYXR0YWNoL3RleHQuZ2lmIiBoZWlnaHQ9IjE2IiB3aWR0aD0iMTYiIGJvcmRlcj0iMCIgYWx0PSJUZXh0IEZpbGUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkdCBjbGFzcz0iYXR0YWNobWVudC10aXRsZSI+CiAgICAgICAgPGEgaHJlZj0iL2ppcmEvc2VjdXJlL2F0dGFjaG1lbnQvMTIzMjQ2MDcvanNwSW5jbHVkZUZvcm0ucGF0Y2giCiAgICAgICAgICAgIHRpdGxlPSJMYXRlc3QgIDI3L01hci8wNiAyMjo0NSAtIEdlb2ZmIEhvd2FyZCIgZHJhZ2dhYmxlPSJ0cnVlIgogICAgICAgICAgICBkYXRhLWRvd25sb2FkdXJsPSIke2F0dGFjaG1lbnQubWltZXR5cGV9OmpzcEluY2x1ZGVGb3JtLnBhdGNoOmh0dHBzOi8vaXNzdWVzLmFwYWNoZS5vcmcvamlyYS9zZWN1cmUvYXR0YWNobWVudC8xMjMyNDYwNy9qc3BJbmNsdWRlRm9ybS5wYXRjaCI+anNwSW5jbHVkZUZvcm0ucGF0Y2gKICAgICAgICA8L2E+CiAgICA8L2R0PgogICAgPGRkIGNsYXNzPSJhdHRhY2htZW50LWRlbGV0ZSI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24iPjwvc3Bhbj4KICAgICAgICAgICAgPC9kZD4KICAgIDxkZCBjbGFzcz0iYXR0YWNobWVudC1kYXRlIj48dGltZSBjbGFzcz0ibGl2ZXN0YW1wIiBkYXRldGltZT0iMjAwNi0wMy0yN1QyMjo0NTo1MyswMDAwIj4yNy9NYXIvMDYgMjI6NDU8L3RpbWU+PC9kZD4KICAgIDxkZCBjbGFzcz0iYXR0YWNobWVudC1zaXplIj4xOCBrQjwvZGQ+CiAgICA8ZGQgY2xhc3M9ImF0dGFjaG1lbnQtYXV0aG9yIj5HZW9mZiBIb3dhcmQ8L2RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L2RsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJhdHRhY2htZW50LWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImF0dGFjaG1lbnQtdGh1bWIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ppcmEvc2VjdXJlL2F0dGFjaG1lbnQvMTIzMjQ4NTUvanNwUmVuZGVyaW5nRm9ybS0yLnBhdGNoIiBkcmFnZ2FibGU9InRydWUiIGRhdGEtZG93bmxvYWR1cmw9IiR7ZmlsZUF0dGFjaG1lbnQubWltZXR5cGV9OmpzcFJlbmRlcmluZ0Zvcm0tMi5wYXRjaDpodHRwczovL2lzc3Vlcy5hcGFjaGUub3JnL2ppcmEvc2VjdXJlL2F0dGFjaG1lbnQvMTIzMjQ4NTUvanNwUmVuZGVyaW5nRm9ybS0yLnBhdGNoIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii9qaXJhL2ltYWdlcy9pY29ucy9hdHRhY2gvdGV4dC5naWYiIGhlaWdodD0iMTYiIHdpZHRoPSIxNiIgYm9yZGVyPSIwIiBhbHQ9IlRleHQgRmlsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGR0IGNsYXNzPSJhdHRhY2htZW50LXRpdGxlIj4KICAgICAgICA8YSBocmVmPSIvamlyYS9zZWN1cmUvYXR0YWNobWVudC8xMjMyNDg1NS9qc3BSZW5kZXJpbmdGb3JtLTIucGF0Y2giCiAgICAgICAgICAgIHRpdGxlPSJMYXRlc3QgIDAzL0Fwci8wNiAwMjo0MyAtIEdlb2ZmIEhvd2FyZCIgZHJhZ2dhYmxlPSJ0cnVlIgogICAgICAgICAgICBkYXRhLWRvd25sb2FkdXJsPSIke2F0dGFjaG1lbnQubWltZXR5cGV9OmpzcFJlbmRlcmluZ0Zvcm0tMi5wYXRjaDpodHRwczovL2lzc3Vlcy5hcGFjaGUub3JnL2ppcmEvc2VjdXJlL2F0dGFjaG1lbnQvMTIzMjQ4NTUvanNwUmVuZGVyaW5nRm9ybS0yLnBhdGNoIj5qc3BSZW5kZXJpbmdGb3JtLTIucGF0Y2gKICAgICAgICA8L2E+CiAgICA8L2R0PgogICAgPGRkIGNsYXNzPSJhdHRhY2htZW50LWRlbGV0ZSI+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Imljb24iPjwvc3Bhbj4KICAgICAgICAgICAgPC9kZD4KICAgIDxkZCBjbGFzcz0iYXR0YWNobWVudC1kYXRlIj48dGltZSBjbGFzcz0ibGl2ZXN0YW1wIiBkYXRldGltZT0iMjAwNi0wNC0wM1QwMjo0MzoxNyswMDAwIj4wMy9BcHIvMDYgMDI6NDM8L3RpbWU+PC9kZD4KICAgIDxkZCBjbGFzcz0iYXR0YWNobWVudC1zaXplIj4xNCBrQjwvZGQ+CiAgICA8ZGQgY2xhc3M9ImF0dGFjaG1lbnQtYXV0aG9yIj5HZW9mZiBIb3dhcmQ8L2RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L2RsPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDwvb2w+CiAgICAgICAgPC9kaXY+PC9kaXY+PGRpdiBpZD1hY3Rpdml0eW1vZHVsZSBjbGFzcz0ibW9kdWxlIHRvZ2dsZS13cmFwIj48ZGl2IGlkPSJhY3Rpdml0eW1vZHVsZV9oZWFkaW5nIiBjbGFzcz0ibW9kLWhlYWRlciI+PHVsIGNsYXNzPSJvcHMiPjwvdWw+PGgyIGNsYXNzPSJ0b2dnbGUtdGl0bGUiPkFjdGl2aXR5PC9oMj48L2Rpdj48ZGl2IGNsYXNzPSJtb2QtY29udGVudCI+CgoKCgoKCgoKCgogICAgPGRpdiBjbGFzcz0idGFid3JhcCB0YWJzMiI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic29ydHdyYXAiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iaWNvbiBpY29uLXNvcnQtZG93biBhamF4LWFjdGl2aXR5LWNvbnRlbnQiIHJlbD0ibm9mb2xsb3ciIGhyZWY9Ii9qaXJhL2Jyb3dzZS9BR0lMQS00ND9hY3Rpb25PcmRlcj1kZXNjIiB0aXRsZT0iQXNjZW5kaW5nIG9yZGVyIC0gQ2xpY2sgdG8gc29ydCBpbiBkZXNjZW5kaW5nIG9yZGVyIj48c3Bhbj5Bc2NlbmRpbmcgb3JkZXIgLSBDbGljayB0byBzb3J0IGluIGRlc2NlbmRpbmcgb3JkZXI8L3NwYW4+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8dWwgaWQ9Imlzc3VlLXRhYnMiIGNsYXNzPSJ0YWJzIGhvcml6b250YWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8bGkgIGRhdGEtaWQ9ImFsbC10YWJwYW5lbCIgZGF0YS1rZXk9ImNvbS5hdGxhc3NpYW4uamlyYS5wbHVnaW4uc3lzdGVtLmlzc3VldGFicGFuZWxzOmFsbC10YWJwYW5lbCIgZGF0YS1sYWJlbD0iQWxsIiBkYXRhLWhyZWY9Ii9qaXJhL2Jyb3dzZS9BR0lMQS00ND9wYWdlPWNvbS5hdGxhc3NpYW4uamlyYS5wbHVnaW4uc3lzdGVtLmlzc3VldGFicGFuZWxzOmFsbC10YWJwYW5lbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYWpheC1hY3Rpdml0eS1jb250ZW50IiBpZD0iYWxsLXRhYnBhbmVsIiBocmVmPSIvamlyYS9icm93c2UvQUdJTEEtNDQ/cGFnZT1jb20uYXRsYXNzaWFuLmppcmEucGx1Z2luLnN5c3RlbS5pc3N1ZXRhYnBhbmVsczphbGwtdGFicGFuZWwiPjxzdHJvbmc+QWxsPC9zdHJvbmc+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8bGkgIGNsYXNzPSJhY3RpdmUiIGlkPSJjb21tZW50LXRhYnBhbmVsIiAgZGF0YS1pZD0iY29tbWVudC10YWJwYW5lbCIgZGF0YS1rZXk9ImNvbS5hdGxhc3NpYW4uamlyYS5wbHVnaW4uc3lzdGVtLmlzc3VldGFicGFuZWxzOmNvbW1lbnQtdGFicGFuZWwiIGRhdGEtbGFiZWw9IkNvbW1lbnRzIiBkYXRhLWhyZWY9Ii9qaXJhL2Jyb3dzZS9BR0lMQS00ND9wYWdlPWNvbS5hdGxhc3NpYW4uamlyYS5wbHVnaW4uc3lzdGVtLmlzc3VldGFicGFuZWxzOmNvbW1lbnQtdGFicGFuZWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5Db21tZW50czwvc3Ryb25nPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8bGkgIGRhdGEtaWQ9Indvcmtsb2ctdGFicGFuZWwiIGRhdGEta2V5PSJjb20uYXRsYXNzaWFuLmppcmEucGx1Z2luLnN5c3RlbS5pc3N1ZXRhYnBhbmVsczp3b3JrbG9nLXRhYnBhbmVsIiBkYXRhLWxhYmVsPSJXb3JrIExvZyIgZGF0YS1ocmVmPSIvamlyYS9icm93c2UvQUdJTEEtNDQ/cGFnZT1jb20uYXRsYXNzaWFuLmppcmEucGx1Z2luLnN5c3RlbS5pc3N1ZXRhYnBhbmVsczp3b3JrbG9nLXRhYnBhbmVsIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJhamF4LWFjdGl2aXR5LWNvbnRlbnQiIGlkPSJ3b3JrbG9nLXRhYnBhbmVsIiBocmVmPSIvamlyYS9icm93c2UvQUdJTEEtNDQ/cGFnZT1jb20uYXRsYXNzaWFuLmppcmEucGx1Z2luLnN5c3RlbS5pc3N1ZXRhYnBhbmVsczp3b3JrbG9nLXRhYnBhbmVsIj48c3Ryb25nPldvcmsgTG9nPC9zdHJvbmc+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICA8bGkgIGRhdGEtaWQ9ImNoYW5nZWhpc3RvcnktdGFicGFuZWwiIGRhdGEta2V5PSJjb20uYXRsYXNzaWFuLmppcmEucGx1Z2luLnN5c3RlbS5pc3N1ZXRhYnBhbmVsczpjaGFuZ2VoaXN0b3J5LXRhYnBhbmVsIiBkYXRhLWxhYmVsPSJIaXN0b3J5IiBkYXRhLWhyZWY9Ii9qaXJhL2Jyb3dzZS9BR0lMQS00ND9wYWdlPWNvbS5hdGxhc3NpYW4uamlyYS5wbHVnaW4uc3lzdGVtLmlzc3VldGFicGFuZWxzOmNoYW5nZWhpc3RvcnktdGFicGFuZWwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9ImFqYXgtYWN0aXZpdHktY29udGVudCIgaWQ9ImNoYW5nZWhpc3RvcnktdGFicGFuZWwiIGhyZWY9Ii9qaXJhL2Jyb3dzZS9BR0lMQS00ND9wYWdlPWNvbS5hdGxhc3NpYW4uamlyYS5wbHVnaW4uc3lzdGVtLmlzc3VldGFicGFuZWxzOmNoYW5nZWhpc3RvcnktdGFicGFuZWwiPjxzdHJvbmc+SGlzdG9yeTwvc3Ryb25nPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPGxpICBkYXRhLWlkPSJhY3Rpdml0eS1zdHJlYW0taXNzdWUtdGFiIiBkYXRhLWtleT0iY29tLmF0bGFzc2lhbi5zdHJlYW1zLnN0cmVhbXMtamlyYS1wbHVnaW46YWN0aXZpdHktc3RyZWFtLWlzc3VlLXRhYiIgZGF0YS1sYWJlbD0iQWN0aXZpdHkiIGRhdGEtaHJlZj0iL2ppcmEvYnJvd3NlL0FHSUxBLTQ0P3BhZ2U9Y29tLmF0bGFzc2lhbi5zdHJlYW1zLnN0cmVhbXMtamlyYS1wbHVnaW46YWN0aXZpdHktc3RyZWFtLWlzc3VlLXRhYiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYWpheC1hY3Rpdml0eS1jb250ZW50IiBpZD0iYWN0aXZpdHktc3RyZWFtLWlzc3VlLXRhYiIgaHJlZj0iL2ppcmEvYnJvd3NlL0FHSUxBLTQ0P3BhZ2U9Y29tLmF0bGFzc2lhbi5zdHJlYW1zLnN0cmVhbXMtamlyYS1wbHVnaW46YWN0aXZpdHktc3RyZWFtLWlzc3VlLXRhYiI+PHN0cm9uZz5BY3Rpdml0eTwvc3Ryb25nPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPGxpICBkYXRhLWlkPSJ0cmFuc2l0aW9ucy1zdW1tYXJ5LXRhYnBhbmVsIiBkYXRhLWtleT0iY29tLmdvb2dsZWNvZGUuamlyYS1zdWl0ZS11dGlsaXRpZXM6dHJhbnNpdGlvbnMtc3VtbWFyeS10YWJwYW5lbCIgZGF0YS1sYWJlbD0iVHJhbnNpdGlvbnMiIGRhdGEtaHJlZj0iL2ppcmEvYnJvd3NlL0FHSUxBLTQ0P3BhZ2U9Y29tLmdvb2dsZWNvZGUuamlyYS1zdWl0ZS11dGlsaXRpZXM6dHJhbnNpdGlvbnMtc3VtbWFyeS10YWJwYW5lbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0iYWpheC1hY3Rpdml0eS1jb250ZW50IiBpZD0idHJhbnNpdGlvbnMtc3VtbWFyeS10YWJwYW5lbCIgaHJlZj0iL2ppcmEvYnJvd3NlL0FHSUxBLTQ0P3BhZ2U9Y29tLmdvb2dsZWNvZGUuamlyYS1zdWl0ZS11dGlsaXRpZXM6dHJhbnNpdGlvbnMtc3VtbWFyeS10YWJwYW5lbCI+PHN0cm9uZz5UcmFuc2l0aW9uczwvc3Ryb25nPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9Imlzc3VlUGFuZWxXcmFwcGVyIj4KICAgICAgICA8ZGl2IGNsYXNzPSJpc3N1ZVBhbmVsUHJvZ3Jlc3MiPjwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Imlzc3VlUGFuZWxDb250YWluZXIiIGlkPSJpc3N1ZV9hY3Rpb25zX2NvbnRhaW5lciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAoKCjxkaXYgaWQ9ImNvbW1lbnQtMTIzNzE5NzUiIGNsYXNzPSJpc3N1ZS1kYXRhLWJsb2NrIGFjdGl2aXR5LWNvbW1lbnQgdHdpeGktYmxvY2sgIGV4cGFuZGVkIj4KICAgIDxkaXYgY2xhc3M9InR3aXhpLXdyYXAgdmVyYm9zZSBhY3Rpb25Db250YWluZXIiPgogICAgICAgIDxkaXYgY2xhc3M9ImFjdGlvbi1oZWFkIj4KICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9InR3aXhpIj48c3BhbiBjbGFzcz0iaWNvbiB0d2l4aS1vcGVuZWQiPjxzcGFuPkhpZGU8L3NwYW4+PC9zcGFuPjwvYT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWN0aW9uLWxpbmtzIj4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Ii9qaXJhL2Jyb3dzZS9BR0lMQS00ND9mb2N1c2VkQ29tbWVudElkPTEyMzcxOTc1JnBhZ2U9Y29tLmF0bGFzc2lhbi5qaXJhLnBsdWdpbi5zeXN0ZW0uaXNzdWV0YWJwYW5lbHM6Y29tbWVudC10YWJwYW5lbCNjb21tZW50LTEyMzcxOTc1IiB0aXRsZT0iQSBwZXJtYW5lbnQgbGluayB0byB0aGlzIGNvbW1lbnQuIiBjbGFzcz0iaWNvbiBpY29uLXBlcm1hIGFjdGl2aXR5bW9kdWxlLWxpbmsiPjxzcGFuPlBlcm1hbGluazwvc3Bhbj48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImFjdGlvbi1kZXRhaWxzIj4gICAgICAgIAogICAgCiAgICAKICAgIAogICAgICAgICAgICAgICAgCgogICAgPGEgY2xhc3M9InVzZXItaG92ZXIgdXNlci1hdmF0YXIiIHJlbD0iZ2VvZmYuaG93YXJkQGdtYWlsLmNvbSIgaWQ9ImNvbW1lbnRhdXRob3JfMTIzNzE5NzVfdmVyYm9zZSIgaHJlZj0iL2ppcmEvc2VjdXJlL1ZpZXdQcm9maWxlLmpzcGE/bmFtZT1nZW9mZi5ob3dhcmQlNDBnbWFpbC5jb20iPjxzcGFuIGNsYXNzPSJhdWktYXZhdGFyIGF1aS1hdmF0YXIteHNtYWxsIj48c3BhbiBjbGFzcz0iYXVpLWF2YXRhci1pbm5lciI+PGltZyBzcmM9Ii9qaXJhL3NlY3VyZS91c2VyYXZhdGFyP3NpemU9eHNtYWxsJmFtcDthdmF0YXJJZD0xMDQ1MiIgLz48L3NwYW4+PC9zcGFuPiBHZW9mZiBIb3dhcmQ8L2E+CiBhZGRlZCBhIGNvbW1lbnQgIC0gPHNwYW4gY2xhc3M9J2NvbW1lbnRkYXRlXzEyMzcxOTc1X3ZlcmJvc2Ugc3ViVGV4dCc+PHNwYW4gY2xhc3M9J2RhdGUgdXNlci10eicgdGl0bGU9JzI3L01hci8wNiAyMjo0NSc+PHRpbWUgY2xhc3M9J2xpdmVzdGFtcCcgZGF0ZXRpbWU9JzIwMDYtMDMtMjdUMjI6NDU6NTMrMDAwMCc+MjcvTWFyLzA2IDIyOjQ1PC90aW1lPjwvc3Bhbj48L3NwYW4+ICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJhY3Rpb24tYm9keSBmbG9vZGVkIj48cD5wcm9wb3NlZCBwYXRjaDwvcD4gPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9InR3aXhpLXdyYXAgY29uY2lzZSBhY3Rpb25Db250YWluZXIiPgogICAgICAgIDxkaXYgY2xhc3M9ImFjdGlvbi1oZWFkIj4KICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9InR3aXhpIj48c3BhbiBjbGFzcz0iaWNvbiB0d2l4aS1jbG9zZWQiPjxzcGFuPlNob3c8L3NwYW4+PC9zcGFuPjwvYT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWN0aW9uLWRldGFpbHMgZmxvb2RlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAKICAgIAogICAgICAgICAgICAgICAgCgogICAgPGEgY2xhc3M9InVzZXItaG92ZXIgdXNlci1hdmF0YXIiIHJlbD0iZ2VvZmYuaG93YXJkQGdtYWlsLmNvbSIgaWQ9ImNvbW1lbnRhdXRob3JfMTIzNzE5NzVfY29uY2lzZSIgaHJlZj0iL2ppcmEvc2VjdXJlL1ZpZXdQcm9maWxlLmpzcGE/bmFtZT1nZW9mZi5ob3dhcmQlNDBnbWFpbC5jb20iPjxzcGFuIGNsYXNzPSJhdWktYXZhdGFyIGF1aS1hdmF0YXIteHNtYWxsIj48c3BhbiBjbGFzcz0iYXVpLWF2YXRhci1pbm5lciI+PGltZyBzcmM9Ii9qaXJhL3NlY3VyZS91c2VyYXZhdGFyP3NpemU9eHNtYWxsJmFtcDthdmF0YXJJZD0xMDQ1MiIgLz48L3NwYW4+PC9zcGFuPiBHZW9mZiBIb3dhcmQ8L2E+CiBhZGRlZCBhIGNvbW1lbnQgIC0gPHNwYW4gY2xhc3M9J2NvbW1lbnRkYXRlXzEyMzcxOTc1X2NvbmNpc2Ugc3ViVGV4dCc+PHNwYW4gY2xhc3M9J2RhdGUgdXNlci10eicgdGl0bGU9JzI3L01hci8wNiAyMjo0NSc+PHRpbWUgY2xhc3M9J2xpdmVzdGFtcCcgZGF0ZXRpbWU9JzIwMDYtMDMtMjdUMjI6NDU6NTMrMDAwMCc+MjcvTWFyLzA2IDIyOjQ1PC90aW1lPjwvc3Bhbj48L3NwYW4+ICAgICAgICAgICAgICAgICAgICBwcm9wb3NlZCBwYXRjaCAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCgoKPGRpdiBpZD0iY29tbWVudC0xMjM3Mjg0OSIgY2xhc3M9Imlzc3VlLWRhdGEtYmxvY2sgYWN0aXZpdHktY29tbWVudCB0d2l4aS1ibG9jayAgZXhwYW5kZWQiPgogICAgPGRpdiBjbGFzcz0idHdpeGktd3JhcCB2ZXJib3NlIGFjdGlvbkNvbnRhaW5lciI+CiAgICAgICAgPGRpdiBjbGFzcz0iYWN0aW9uLWhlYWQiPgogICAgICAgICAgICA8YSBocmVmPSIjIiBjbGFzcz0idHdpeGkiPjxzcGFuIGNsYXNzPSJpY29uIHR3aXhpLW9wZW5lZCI+PHNwYW4+SGlkZTwvc3Bhbj48L3NwYW4+PC9hPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJhY3Rpb24tbGlua3MiPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iL2ppcmEvYnJvd3NlL0FHSUxBLTQ0P2ZvY3VzZWRDb21tZW50SWQ9MTIzNzI4NDkmcGFnZT1jb20uYXRsYXNzaWFuLmppcmEucGx1Z2luLnN5c3RlbS5pc3N1ZXRhYnBhbmVsczpjb21tZW50LXRhYnBhbmVsI2NvbW1lbnQtMTIzNzI4NDkiIHRpdGxlPSJBIHBlcm1hbmVudCBsaW5rIHRvIHRoaXMgY29tbWVudC4iIGNsYXNzPSJpY29uIGljb24tcGVybWEgYWN0aXZpdHltb2R1bGUtbGluayI+PHNwYW4+UGVybWFsaW5rPC9zcGFuPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWN0aW9uLWRldGFpbHMiPiAgICAgICAgCiAgICAKICAgIAogICAgCiAgICAgICAgICAgICAgICAKCiAgICA8YSBjbGFzcz0idXNlci1ob3ZlciB1c2VyLWF2YXRhciIgcmVsPSJnZW9mZi5ob3dhcmRAZ21haWwuY29tIiBpZD0iY29tbWVudGF1dGhvcl8xMjM3Mjg0OV92ZXJib3NlIiBocmVmPSIvamlyYS9zZWN1cmUvVmlld1Byb2ZpbGUuanNwYT9uYW1lPWdlb2ZmLmhvd2FyZCU0MGdtYWlsLmNvbSI+PHNwYW4gY2xhc3M9ImF1aS1hdmF0YXIgYXVpLWF2YXRhci14c21hbGwiPjxzcGFuIGNsYXNzPSJhdWktYXZhdGFyLWlubmVyIj48aW1nIHNyYz0iL2ppcmEvc2VjdXJlL3VzZXJhdmF0YXI/c2l6ZT14c21hbGwmYW1wO2F2YXRhcklkPTEwNDUyIiAvPjwvc3Bhbj48L3NwYW4+IEdlb2ZmIEhvd2FyZDwvYT4KIGFkZGVkIGEgY29tbWVudCAgLSA8c3BhbiBjbGFzcz0nY29tbWVudGRhdGVfMTIzNzI4NDlfdmVyYm9zZSBzdWJUZXh0Jz48c3BhbiBjbGFzcz0nZGF0ZSB1c2VyLXR6JyB0aXRsZT0nMDMvQXByLzA2IDAyOjQyJz48dGltZSBjbGFzcz0nbGl2ZXN0YW1wJyBkYXRldGltZT0nMjAwNi0wNC0wM1QwMjo0MjoxNSswMDAwJz4wMy9BcHIvMDYgMDI6NDI8L3RpbWU+PC9zcGFuPjwvc3Bhbj4gIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImFjdGlvbi1ib2R5IGZsb29kZWQiPjxwPmFsdGVybmF0ZSBwYXRjaDwvcD4gPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9InR3aXhpLXdyYXAgY29uY2lzZSBhY3Rpb25Db250YWluZXIiPgogICAgICAgIDxkaXYgY2xhc3M9ImFjdGlvbi1oZWFkIj4KICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9InR3aXhpIj48c3BhbiBjbGFzcz0iaWNvbiB0d2l4aS1jbG9zZWQiPjxzcGFuPlNob3c8L3NwYW4+PC9zcGFuPjwvYT4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iYWN0aW9uLWRldGFpbHMgZmxvb2RlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAKICAgIAogICAgICAgICAgICAgICAgCgogICAgPGEgY2xhc3M9InVzZXItaG92ZXIgdXNlci1hdmF0YXIiIHJlbD0iZ2VvZmYuaG93YXJkQGdtYWlsLmNvbSIgaWQ9ImNvbW1lbnRhdXRob3JfMTIzNzI4NDlfY29uY2lzZSIgaHJlZj0iL2ppcmEvc2VjdXJlL1ZpZXdQcm9maWxlLmpzcGE/bmFtZT1nZW9mZi5ob3dhcmQlNDBnbWFpbC5jb20iPjxzcGFuIGNsYXNzPSJhdWktYXZhdGFyIGF1aS1hdmF0YXIteHNtYWxsIj48c3BhbiBjbGFzcz0iYXVpLWF2YXRhci1pbm5lciI+PGltZyBzcmM9Ii9qaXJhL3NlY3VyZS91c2VyYXZhdGFyP3NpemU9eHNtYWxsJmFtcDthdmF0YXJJZD0xMDQ1MiIgLz48L3NwYW4+PC9zcGFuPiBHZW9mZiBIb3dhcmQ8L2E+CiBhZGRlZCBhIGNvbW1lbnQgIC0gPHNwYW4gY2xhc3M9J2NvbW1lbnRkYXRlXzEyMzcyODQ5X2NvbmNpc2Ugc3ViVGV4dCc+PHNwYW4gY2xhc3M9J2RhdGUgdXNlci10eicgdGl0bGU9JzAzL0Fwci8wNiAwMjo0Mic+PHRpbWUgY2xhc3M9J2xpdmVzdGFtcCcgZGF0ZXRpbWU9JzIwMDYtMDQtMDNUMDI6NDI6MTUrMDAwMCc+MDMvQXByLzA2IDAyOjQyPC90aW1lPjwvc3Bhbj48L3NwYW4+ICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdGUgcGF0Y2ggICAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgPC9kaXY+CjwvZGl2PjwvZGl2PjwvZGl2PjxkaXYgaWQ9InZpZXdpc3N1ZXNpZGViYXIiIGNsYXNzPSJhdWktaXRlbSBpc3N1ZS1zaWRlLWNvbHVtbiI+PGRpdiBpZD1wZW9wbGVtb2R1bGUgY2xhc3M9Im1vZHVsZSB0b2dnbGUtd3JhcCI+PGRpdiBpZD0icGVvcGxlbW9kdWxlX2hlYWRpbmciIGNsYXNzPSJtb2QtaGVhZGVyIj48dWwgY2xhc3M9Im9wcyI+PC91bD48aDIgY2xhc3M9InRvZ2dsZS10aXRsZSI+UGVvcGxlPC9oMj48L2Rpdj48ZGl2IGNsYXNzPSJtb2QtY29udGVudCI+PHVsIGNsYXNzPSJpdGVtLWRldGFpbHMiIGlkPSJwZW9wbGVkZXRhaWxzIj4KICAgIDxsaSBjbGFzcz0icGVvcGxlLWRldGFpbHMiPgogICAgICAgICAgICAgICAgPGRsPgogICAgICAgICAgICA8ZHQ+QXNzaWduZWU6PC9kdD4KICAgICAgICAgICAgPGRkPgogICAgICAgICAgICAgICAgPHNwYW4gaWQ9ImFzc2lnbmVlLXZhbCIgY2xhc3M9InZpZXctaXNzdWUtZmllbGQiPgoKICAgICAgICAgICAgPHNwYW4gY2xhc3M9InVzZXItaG92ZXIiIGlkPSJpc3N1ZV9zdW1tYXJ5X2Fzc2lnbmVlX2NsaW0iIHJlbD0iY2xpbSI+CiAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJhdWktYXZhdGFyIGF1aS1hdmF0YXItc21hbGwiPjxzcGFuIGNsYXNzPSJhdWktYXZhdGFyLWlubmVyIj48aW1nIHNyYz0iL2ppcmEvc2VjdXJlL3VzZXJhdmF0YXI/c2l6ZT1zbWFsbCZhbXA7YXZhdGFySWQ9MTA0NTIiIC8+PC9zcGFuPjwvc3Bhbj4KICAgICAgICAgICAgQ2hyaXMgTGltCiAgICAgICAgPC9zcGFuPgogICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kZD4KICAgICAgICA8L2RsPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGw+CiAgICAgICAgICAgIDxkdD5SZXBvcnRlcjo8L2R0PgogICAgICAgICAgICA8ZGQ+CiAgICAgICAgICAgICAgICA8c3BhbiBpZD0icmVwb3J0ZXItdmFsIiBjbGFzcz0idmlldy1pc3N1ZS1maWVsZCI+CgogICAgICAgICAgICA8c3BhbiBjbGFzcz0idXNlci1ob3ZlciIgaWQ9Imlzc3VlX3N1bW1hcnlfcmVwb3J0ZXJfZ2VvZmYuaG93YXJkQGdtYWlsLmNvbSIgcmVsPSJnZW9mZi5ob3dhcmRAZ21haWwuY29tIj4KICAgICAgICAgICAgPHNwYW4gY2xhc3M9ImF1aS1hdmF0YXIgYXVpLWF2YXRhci1zbWFsbCI+PHNwYW4gY2xhc3M9ImF1aS1hdmF0YXItaW5uZXIiPjxpbWcgc3JjPSIvamlyYS9zZWN1cmUvdXNlcmF2YXRhcj9zaXplPXNtYWxsJmFtcDthdmF0YXJJZD0xMDQ1MiIgLz48L3NwYW4+PC9zcGFuPgogICAgICAgICAgICBHZW9mZiBIb3dhcmQKICAgICAgICA8L3NwYW4+CiAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvZGQ+CiAgICAgICAgPC9kbD4KICAgICAgICAgICAgICAgICAgICA8L2xpPgo8L3VsPgogICAgPHVsIGNsYXNzPSJpdGVtLWRldGFpbHMiPgogICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkbD4KICAgICAgICAgICAgICAgICAgICA8ZHQ+Vm90ZXM6PC9kdD4KICAgICAgICAgICAgICAgICAgICA8ZGQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0idm90ZS1kYXRhIiBjbGFzcz0iYXVpLWJhZGdlIHZvdGUtc3RhdGUtb2ZmIj4wPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0idm90ZS1sYWJlbCIgdGl0bGU9IllvdSBoYXZlIHRvIGJlIGxvZ2dlZCBpbiB0byB2b3RlIGZvciBhbiBpc3N1ZS4iPlZvdGUgZm9yIHRoaXMgaXNzdWU8L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kZD4KICAgICAgICAgICAgICAgIDwvZGw+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGw+CiAgICAgICAgICAgICAgICAgICAgPGR0PldhdGNoZXJzOjwvZHQ+CiAgICAgICAgICAgICAgICAgICAgPGRkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGlkPSJ3YXRjaGVyLWRhdGEiIGNsYXNzPSJhdWktYmFkZ2Ugd2F0Y2gtc3RhdGUtb2ZmIj4wPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBpZD0id2F0Y2gtbGFiZWwiIHRpdGxlPSJZb3UgaGF2ZSB0byBiZSBsb2dnZWQgaW4gdG8gd2F0Y2ggYW4gaXNzdWUuIj5TdGFydCB3YXRjaGluZyB0aGlzIGlzc3VlPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGQ+CiAgICAgICAgICAgICAgICA8L2RsPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICA8L3VsPgo8L2Rpdj48L2Rpdj48ZGl2IGlkPWRhdGVzbW9kdWxlIGNsYXNzPSJtb2R1bGUgdG9nZ2xlLXdyYXAiPjxkaXYgaWQ9ImRhdGVzbW9kdWxlX2hlYWRpbmciIGNsYXNzPSJtb2QtaGVhZGVyIj48dWwgY2xhc3M9Im9wcyI+PC91bD48aDIgY2xhc3M9InRvZ2dsZS10aXRsZSI+RGF0ZXM8L2gyPjwvZGl2PjxkaXYgY2xhc3M9Im1vZC1jb250ZW50Ij48dWwgY2xhc3M9Iml0ZW0tZGV0YWlscyI+CiAgICA8bGk+CiAgICAgICAgICAgIDxkbCBjbGFzcz0iZGF0ZXMiPgogICAgICAgICAgICA8ZHQ+Q3JlYXRlZDo8L2R0PgogICAgICAgICAgICA8ZGQgY2xhc3M9ImRhdGUgdXNlci10eiIgIHRpdGxlPSIyNy9NYXIvMDYgMjI6MjAiID4KCiAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLW5hbWU9IkNyZWF0ZWQiIGlkPSJjcmVhdGUtZGF0ZSIgIGRhdGEtZmllbGR0eXBlPSJkYXRldGltZSIgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRpbWUgY2xhc3M9ImxpdmVzdGFtcCIgZGF0ZXRpbWU9IjIwMDYtMDMtMjdUMjI6MjA6MTErMDAwMCI+MjcvTWFyLzA2IDIyOjIwPC90aW1lPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvZGQ+CiAgICAgICAgPC9kbD4KICAgICAgICAgICAgPGRsIGNsYXNzPSJkYXRlcyI+CiAgICAgICAgICAgIDxkdD5VcGRhdGVkOjwvZHQ+CiAgICAgICAgICAgIDxkZCBjbGFzcz0iZGF0ZSB1c2VyLXR6IiAgdGl0bGU9IjAzL0Fwci8wNiAwMjo0MyIgPgoKICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtbmFtZT0iVXBkYXRlZCIgaWQ9InVwZGF0ZWQtZGF0ZSIgIGRhdGEtZmllbGR0eXBlPSJkYXRldGltZSIgID4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRpbWUgY2xhc3M9ImxpdmVzdGFtcCIgZGF0ZXRpbWU9IjIwMDYtMDQtMDNUMDI6NDM6MTcrMDAwMCI+MDMvQXByLzA2IDAyOjQzPC90aW1lPiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvZGQ+CiAgICAgICAgPC9kbD4KICAgICAgICA8L2xpPgo8L3VsPgo8L2Rpdj48L2Rpdj48ZGl2IGlkPXZpZXdpc3N1ZS1kZXZzdGF0dXMtcGFuZWwgY2xhc3M9Im1vZHVsZSB0b2dnbGUtd3JhcCI+PGRpdiBpZD0idmlld2lzc3VlLWRldnN0YXR1cy1wYW5lbF9oZWFkaW5nIiBjbGFzcz0ibW9kLWhlYWRlciI+PHVsIGNsYXNzPSJvcHMiPjwvdWw+PGgyIGNsYXNzPSJ0b2dnbGUtdGl0bGUiPkRldmVsb3BtZW50PC9oMj48L2Rpdj48ZGl2IGNsYXNzPSJtb2QtY29udGVudCI+PHVsIGlkPSJkZXZzdGF0dXMtY29udGFpbmVyIiBjbGFzcz0iaXRlbS1kZXRhaWxzIGRldi1zdGF0dXMtY29udGFpbmVyIiBkYXRhLWxhYnMtanNvbj0ieyZxdW90O2FsbG93ZWQmcXVvdDs6ZmFsc2UsJnF1b3Q7b3B0ZWRJbiZxdW90Ozp0cnVlLCZxdW90O29wdGVkSW5CeUFkbWluJnF1b3Q7OnRydWUsJnF1b3Q7ZGlzbWlzc2VkJnF1b3Q7OmZhbHNlLCZxdW90O2lkJnF1b3Q7OjF9IiBkYXRhLXNob3ctY29udGFjdC1hZG1pbi1mb3JtPSJmYWxzZSIgZGF0YS1pc3N1ZS10eXBlPSJOZXcgRmVhdHVyZSIgZGF0YS1pc3N1ZS1zdGF0dXM9Ik9wZW4iIGRhdGEtaXMtYXNzaWduYWJsZT0iZmFsc2UiIGRhdGEtaXMtYXNzaWduZWU9ImZhbHNlIiBkYXRhLWFpdC1oZWxwLXVybC1qc29uPSJ7JnF1b3Q7dXJsJnF1b3Q7OiZxdW90O2h0dHBzOi8vZG9jcy5hdGxhc3NpYW4uY29tL2ppcmEvZG9jcy0wNjMvQWR2YW5jZWQrd29ya2Zsb3crY29uZmlndXJhdGlvbiZxdW90OywmcXVvdDthbHQmcXVvdDs6JnF1b3Q7R2V0IGhlbHAhJnF1b3Q7LCZxdW90O2tleSZxdW90OzomcXVvdDt3b3JrZmxvdy5hdXRvLnRyaWdnZXJzJnF1b3Q7LCZxdW90O2xvY2FsJnF1b3Q7OmZhbHNlLCZxdW90O3RpdGxlJnF1b3Q7OiZxdW90O0FkdmFuY2VkIHdvcmtmbG93IGNvbmZpZ3VyYXRpb24mcXVvdDt9IiA+PGRpdiBjbGFzcz0iaGlkZGVuIGRldi1zdW1tYXJ5IGpzb24tYmxvYiIgZGF0YS1qc29uPSJ7JnF1b3Q7Y2FjaGVkVmFsdWUmcXVvdDs6eyZxdW90O2Vycm9ycyZxdW90OzpbXSwmcXVvdDtjb25maWdFcnJvcnMmcXVvdDs6W10sJnF1b3Q7c3VtbWFyeSZxdW90Ozp7JnF1b3Q7cHVsbHJlcXVlc3QmcXVvdDs6eyZxdW90O292ZXJhbGwmcXVvdDs6eyZxdW90O2NvdW50JnF1b3Q7OjAsJnF1b3Q7bGFzdFVwZGF0ZWQmcXVvdDs6bnVsbCwmcXVvdDtzdGF0ZUNvdW50JnF1b3Q7OjAsJnF1b3Q7c3RhdGUmcXVvdDs6JnF1b3Q7T1BFTiZxdW90O30sJnF1b3Q7YnlJbnN0YW5jZVR5cGUmcXVvdDs6e319LCZxdW90O2J1aWxkJnF1b3Q7OnsmcXVvdDtvdmVyYWxsJnF1b3Q7OnsmcXVvdDtjb3VudCZxdW90OzowLCZxdW90O2xhc3RVcGRhdGVkJnF1b3Q7Om51bGwsJnF1b3Q7ZmFpbGVkQnVpbGRDb3VudCZxdW90OzowLCZxdW90O3N1Y2Nlc3NmdWxCdWlsZENvdW50JnF1b3Q7OjAsJnF1b3Q7dW5rbm93bkJ1aWxkQ291bnQmcXVvdDs6MH0sJnF1b3Q7YnlJbnN0YW5jZVR5cGUmcXVvdDs6e319LCZxdW90O3JldmlldyZxdW90Ozp7JnF1b3Q7b3ZlcmFsbCZxdW90Ozp7JnF1b3Q7Y291bnQmcXVvdDs6MCwmcXVvdDtsYXN0VXBkYXRlZCZxdW90OzpudWxsLCZxdW90O3N0YXRlQ291bnQmcXVvdDs6MCwmcXVvdDtzdGF0ZSZxdW90OzpudWxsLCZxdW90O2R1ZURhdGUmcXVvdDs6bnVsbCwmcXVvdDtvdmVyRHVlJnF1b3Q7OmZhbHNlfSwmcXVvdDtieUluc3RhbmNlVHlwZSZxdW90Ozp7fX0sJnF1b3Q7ZGVwbG95bWVudC1lbnZpcm9ubWVudCZxdW90Ozp7JnF1b3Q7b3ZlcmFsbCZxdW90Ozp7JnF1b3Q7Y291bnQmcXVvdDs6MCwmcXVvdDtsYXN0VXBkYXRlZCZxdW90OzpudWxsLCZxdW90O3RvcEVudmlyb25tZW50cyZxdW90OzpbXSwmcXVvdDtzaG93UHJvamVjdHMmcXVvdDs6ZmFsc2UsJnF1b3Q7c3VjY2Vzc2Z1bENvdW50JnF1b3Q7OjB9LCZxdW90O2J5SW5zdGFuY2VUeXBlJnF1b3Q7Ont9fSwmcXVvdDtyZXBvc2l0b3J5JnF1b3Q7OnsmcXVvdDtvdmVyYWxsJnF1b3Q7OnsmcXVvdDtjb3VudCZxdW90OzowLCZxdW90O2xhc3RVcGRhdGVkJnF1b3Q7Om51bGx9LCZxdW90O2J5SW5zdGFuY2VUeXBlJnF1b3Q7Ont9fSwmcXVvdDticmFuY2gmcXVvdDs6eyZxdW90O292ZXJhbGwmcXVvdDs6eyZxdW90O2NvdW50JnF1b3Q7OjAsJnF1b3Q7bGFzdFVwZGF0ZWQmcXVvdDs6bnVsbH0sJnF1b3Q7YnlJbnN0YW5jZVR5cGUmcXVvdDs6e319fX0sJnF1b3Q7aXNTdGFsZSZxdW90Ozp0cnVlfSI+PC9kaXY+PHVsIGNsYXNzPSJpdGVtLWRldGFpbHMgc3RhdHVzLXBhbmVscyBkZXZzdGF0dXMtZW50cnkiPjxsaSBjbGFzcz0ic3RhdHVzLXBhbmVsIGhpZGRlbiIgaWQ9ImJyYW5jaC1zdGF0dXMtcGFuZWwiIGRhdGEtbW9kdWxlPSJCcmFuY2hNb2R1bGUiPjwvbGk+PGxpIGNsYXNzPSJzdGF0dXMtcGFuZWwgaGlkZGVuIiBpZD0iY29tbWl0LXN0YXR1cy1wYW5lbCIgZGF0YS1tb2R1bGU9IkNvbW1pdE1vZHVsZSI+PC9saT48bGkgY2xhc3M9InN0YXR1cy1wYW5lbCBoaWRkZW4iIGlkPSJwdWxscmVxdWVzdC1zdGF0dXMtcGFuZWwiIGRhdGEtbW9kdWxlPSJQdWxsUmVxdWVzdE1vZHVsZSI+PC9saT48bGkgY2xhc3M9InN0YXR1cy1wYW5lbCBoaWRkZW4iIGlkPSJyZXZpZXctc3RhdHVzLXBhbmVsIiBkYXRhLW1vZHVsZT0iUmV2aWV3TW9kdWxlIj48L2xpPjxsaSBjbGFzcz0ic3RhdHVzLXBhbmVsIGhpZGRlbiIgaWQ9ImJ1aWxkLXN0YXR1cy1wYW5lbCIgZGF0YS1tb2R1bGU9IkJ1aWxkTW9kdWxlIiBkYXRhLWlzc3VlLXR5cGU9Ik5ldyBGZWF0dXJlIiBkYXRhLWlzc3VlLXN0YXR1cz0iT3BlbiIgZGF0YS1pcy1hc3NpZ25lZT0iZmFsc2UiPjwvbGk+PGxpIGNsYXNzPSJzdGF0dXMtcGFuZWwgZGVwbG95bWVudC1zdW1tYXJ5IGhpZGRlbiIgaWQ9ImRlcGxveW1lbnQtc3RhdHVzLXBhbmVsIiBkYXRhLW1vZHVsZT0iRGVwbG95bWVudE1vZHVsZSIgZGF0YS1pc3N1ZS10eXBlPSJOZXcgRmVhdHVyZSIgZGF0YS1pc3N1ZS1zdGF0dXM9Ik9wZW4iIGRhdGEtaXMtYXNzaWduZWU9ImZhbHNlIj48L2xpPjwvdWw+PGxpIGNsYXNzPSJjYWxsLXRvLWFjdGlvbnMgZGV2c3RhdHVzLWVudHJ5IGhpZGRlbiI+PC9saT48bGkgY2xhc3M9Im1lc3NhZ2UtcGFuZWwgaGlkZGVuIj48L2xpPjxsaSBjbGFzcz0ibGFicy1vbi1vZmYtY29udGFpbmVyIGhpZGRlbiI+PC9saT48L3VsPjwvZGl2PjwvZGl2PjxkaXYgaWQ9Z3JlZW5ob3BwZXItYWdpbGUtaXNzdWUtd2ViLXBhbmVsIGNsYXNzPSJtb2R1bGUgdG9nZ2xlLXdyYXAiPjxkaXYgaWQ9ImdyZWVuaG9wcGVyLWFnaWxlLWlzc3VlLXdlYi1wYW5lbF9oZWFkaW5nIiBjbGFzcz0ibW9kLWhlYWRlciI+PHVsIGNsYXNzPSJvcHMiPjwvdWw+PGgyIGNsYXNzPSJ0b2dnbGUtdGl0bGUiPkFnaWxlPC9oMj48L2Rpdj48ZGl2IGNsYXNzPSJtb2QtY29udGVudCI+Cgo8dWwgY2xhc3M9Iml0ZW0tZGV0YWlscyBnaHgtc2VwYXJhdGVkIj4KICAgIDxsaT4KICAgICAgICA8YSBjbGFzcz0iaXNzdWVhY3Rpb24tZ3JlZW5ob3BwZXItcmFwaWRib2FyZC1vcGVyYXRpb24ganMtcmFwaWRib2FyZC1vcGVyYXRpb24taXNzdWUiCiAgICAgICAgICAgaHJlZj0iL2ppcmEvc2VjdXJlL0dIR29Ub0JvYXJkLmpzcGE/aXNzdWVJZD0xMjMzMDczNyIKICAgICAgICAgICB0aXRsZT0iVmlldyB0aGlzIGlzc3VlIG9uIGFuIEFnaWxlIGJvYXJkIj4KICAgICAgICAgICAgVmlldyBvbiBCb2FyZAogICAgICAgIDwvYT4KICAgIDwvbGk+CjwvdWw+CjwvZGl2PjwvZGl2PjwvZGl2PjwvZGl2PgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgoKICAgIDxmaWVsZHNldCBjbGFzcz0iaGlkZGVuIHBhcmFtZXRlcnMiPgogICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIHRpdGxlPSJhdXRvY29tcGxldGVFbmFibGVkIiB2YWx1ZT0idHJ1ZSIvPgogICAgPC9maWVsZHNldD4KICAgIAogICAgPC9zZWN0aW9uPgogICAgPGZvb3RlciBpZD0iZm9vdGVyIiByb2xlPSJjb250ZW50aW5mbyI+CiAgICAgICAgCiAgICAgICAgCgo8c2VjdGlvbiBjbGFzcz0iZm9vdGVyLWJvZHkiPgoKCgo8dWwgY2xhc3M9ImF0bGFzc2lhbi1mb290ZXIiPgogICAgPGxpPgogICAgICAgIEF0bGFzc2lhbiBKSVJBIDxhIGNsYXNzPSJzZW8tbGluayIgaHJlZj0iaHR0cHM6Ly93d3cuYXRsYXNzaWFuLmNvbS9zb2Z0d2FyZS9qaXJhIj5Qcm9qZWN0IE1hbmFnZW1lbnQgU29mdHdhcmU8L2E+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgPHNwYW4gaWQ9ImZvb3Rlci1idWlsZC1pbmZvcm1hdGlvbiI+KHY2LjMuNCM2MzMyLTxzcGFuIHRpdGxlPSc1MWJjMjI1ZWY0NzRhZmUzMTI4YjJmNjY4Nzg0NzdmMzIyMzk3YjE2JyBkYXRhLWNvbW1pdC1pZD0nNTFiYzIyNWVmNDc0YWZlMzEyOGIyZjY2ODc4NDc3ZjMyMjM5N2IxNn0nPnNoYTE6NTFiYzIyNTwvc3Bhbj4pPC9zcGFuPgogICAgPC9saT4KICAgIDxsaT4KICAgICAgICA8YSBpZD0iYWJvdXQtbGluayIgaHJlZj0iL2ppcmEvc2VjdXJlL0Fib3V0UGFnZS5qc3BhIj5BYm91dCBKSVJBPC9hPgogICAgPC9saT4KICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaWQ9ImZvb3Rlci1yZXBvcnQtcHJvYmxlbS1saW5rIiBocmVmPSIvamlyYS9zZWN1cmUvQ3JlYXRlSXNzdWUhZGVmYXVsdC5qc3BhIj5SZXBvcnQgYSBwcm9ibGVtPC9hPgogICAgPC9saT4KPC91bD4KICAgIDx1bCBjbGFzcz0iYXRsYXNzaWFuLWZvb3RlciI+CiAgICAgICAgPGxpIGNsYXNzPSJsaWNlbnNlbWVzc2FnZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQb3dlcmVkIGJ5IGEgZnJlZSBBdGxhc3NpYW4gPGEgaHJlZj0naHR0cDovL3d3dy5hdGxhc3NpYW4uY29tL3NvZnR3YXJlL2ppcmEnPkpJUkE8L2E+IG9wZW4gc291cmNlIGxpY2Vuc2UgZm9yIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLiBUcnkgSklSQSAtIDxhIGhyZWY9J2h0dHA6Ly93d3cuYXRsYXNzaWFuLmNvbS9zb2Z0d2FyZS9qaXJhJz5idWcgdHJhY2tpbmcgc29mdHdhcmU8L2E+IGZvciA8aT55b3VyPC9pPiB0ZWFtLgoKICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgPC91bD4KCjxmb3JtIGlkPSJqaXJhX3JlcXVlc3RfdGltaW5nX2luZm8iIGNsYXNzPSJkb250LWRlZmF1bHQtZm9jdXMiID4KCTxmaWVsZHNldCBjbGFzcz0icGFyYW1ldGVycyBoaWRkZW4iPgoJCTxpbnB1dCB0eXBlPSJoaWRkZW4iIHRpdGxlPSJqaXJhLnJlcXVlc3Quc3RhcnQubWlsbGlzIiB2YWx1ZT0iMTQ0Nzk2MTg1ODE1MCIgLz4KCQk8aW5wdXQgdHlwZT0iaGlkZGVuIiB0aXRsZT0iamlyYS5yZXF1ZXN0LnNlcnZlci50aW1lIiB2YWx1ZT0iMTE0IiAvPgoJCTxpbnB1dCB0eXBlPSJoaWRkZW4iIHRpdGxlPSJqaXJhLnJlcXVlc3QuaWQiIHZhbHVlPSIxMTc3eDMwNTk5MDQxeDUiIC8+CgkJPGlucHV0IHR5cGU9ImhpZGRlbiIgdGl0bGU9ImppcmEuc2Vzc2lvbi5leHBpcnkudGltZSIgdmFsdWU9Ii0iIC8+CgkJPGlucHV0IHR5cGU9ImhpZGRlbiIgdGl0bGU9ImppcmEuc2Vzc2lvbi5leHBpcnkuaW4ubWlucyIgdmFsdWU9Ii0iIC8+CgkJPGlucHV0IGlkPSJqaXJhQ29uY3VycmVudFJlcXVlc3RzIiB0eXBlPSJoaWRkZW4iIG5hbWU9ImppcmEucmVxdWVzdC5jb25jdXJyZW50LnJlcXVlc3RzIiB2YWx1ZT0iNyIgLz4KCTwvZmllbGRzZXQ+CjwvZm9ybT4KPCEtLQoJICAgICAgICAgICAgICAgICBSRVFVRVNUIElEIDogMTE3N3gzMDU5OTA0MXg1CgkgICAgICAgICAgUkVRVUVTVCBUSU1FU1RBTVAgOiBbMTkvTm92LzIwMTU6MTk6Mzc6MzggKzAwMDBdCgkgICAgICAgICAgICAgICBSRVFVRVNUIFRJTUUgOiAwLjExNDAKCSAgICAgICAgICAgICAgICAgQVNFU1NJT05JRCA6IC0KCSAgICAgICAgQ09OQ1VSUkVOVCBSRVFVRVNUUyA6IDcKCgkgICAgICAgICAgICAgICAgICAgICAgZGIucmVhZHMgOiBuYW1lPWRiLnJlYWRzOyBpbnY9Mjk7IG1zPTI0OyBjcHU9MDsgcnNzPTA7CgkgICAgICAgICAgICAgICAgICAgICAgZGIuY29ubnMgOiBuYW1lPWRiLmNvbm5zOyBpbnY9NDU7IG1zPTQxOyBjcHU9MDsgcnNzPTA7Ci0tPgogICAgPGRpdiBpZD0iZm9vdGVyLWxvZ28iPjxhIGhyZWY9Imh0dHA6Ly93d3cuYXRsYXNzaWFuLmNvbS8iPkF0bGFzc2lhbjwvYT48L2Rpdj4KPC9zZWN0aW9uPgoKCgoKCgoKCgo8ZmllbGRzZXQgY2xhc3M9ImhpZGRlbiBwYXJhbWV0ZXJzIj4KICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIHRpdGxlPSJsb2dnZWRJblVzZXIiIHZhbHVlPSIiPgogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgdGl0bGU9ImFqYXhUaW1lb3V0IiB2YWx1ZT0iVGhlIGNhbGwgdG8gdGhlIEpJUkEgc2VydmVyIGRpZCBub3QgY29tcGxldGUgd2l0aGluIHRoZSB0aW1lb3V0IHBlcmlvZC4gIFdlIGFyZSB1bnN1cmUgb2YgdGhlIHJlc3VsdCBvZiB0aGlzIG9wZXJhdGlvbi4iPgogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgdGl0bGU9IkppcmFWZXJzaW9uIiB2YWx1ZT0iNi4zLjQiIC8+CiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiB0aXRsZT0iYWpheFVuYXV0aG9yaXNlZCIgdmFsdWU9IllvdSBhcmUgbm90IGF1dGhvcmlzZWQgdG8gcGVyZm9ybSB0aGlzIG9wZXJhdGlvbi4gUGxlYXNlIGxvZyBpbi4iPgogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgdGl0bGU9ImJhc2VVUkwiIHZhbHVlPSJodHRwczovL2lzc3Vlcy5hcGFjaGUub3JnOjQ0My9qaXJhIj4KICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIHRpdGxlPSJhamF4Q29tbXNFcnJvciIgdmFsdWU9IlRoZSBKSVJBIHNlcnZlciBjb3VsZCBub3QgYmUgY29udGFjdGVkLiBUaGlzIG1heSBiZSBhIHRlbXBvcmFyeSBnbGl0Y2ggb3IgdGhlIHNlcnZlciBtYXkgYmUgZG93bi4iPgogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgdGl0bGU9ImFqYXhTZXJ2ZXJFcnJvciIgdmFsdWU9IlRoZSBKSVJBIHNlcnZlciB3YXMgY29udGFjdGVkIGJ1dCBoYXMgcmV0dXJuZWQgYW4gZXJyb3IgcmVzcG9uc2UuIFdlIGFyZSB1bnN1cmUgb2YgdGhlIHJlc3VsdCBvZiB0aGlzIG9wZXJhdGlvbi4iPgogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgdGl0bGU9ImFqYXhFcnJvckNsb3NlRGlhbG9nIiB2YWx1ZT0iQ2xvc2UgdGhpcyBkaWFsb2cgYW5kIHByZXNzIHJlZnJlc2ggaW4geW91ciBicm93c2VyIj4KICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIHRpdGxlPSJhamF4RXJyb3JEaWFsb2dIZWFkaW5nIiB2YWx1ZT0iQ29tbXVuaWNhdGlvbnMgQnJlYWtkb3duIj4KCiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiB0aXRsZT0iZGlydHlNZXNzYWdlIiB2YWx1ZT0iWW91IGhhdmUgZW50ZXJlZCBuZXcgZGF0YSBvbiB0aGlzIHBhZ2UuIElmIHlvdSBuYXZpZ2F0ZSBhd2F5IGZyb20gdGhpcyBwYWdlIHdpdGhvdXQgZmlyc3Qgc2F2aW5nIHlvdXIgZGF0YSwgdGhlIGNoYW5nZXMgd2lsbCBiZSBsb3N0LiI+CiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiB0aXRsZT0iZGlydHlEaWFsb2dNZXNzYWdlIiB2YWx1ZT0iWW91IGhhdmUgZW50ZXJlZCBuZXcgZGF0YSBpbiB0aGlzIGRpYWxvZy4gSWYgeW91IG5hdmlnYXRlIGF3YXkgZnJvbSB0aGlzIGRpYWxvZyB3aXRob3V0IGZpcnN0IHNhdmluZyB5b3VyIGRhdGEsIHRoZSBjaGFuZ2VzIHdpbGwgYmUgbG9zdC4gQ2xpY2sgY2FuY2VsIHRvIHJldHVybiB0byB0aGUgZGlhbG9nLiI+CiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiB0aXRsZT0ia2V5VHlwZSIgdmFsdWU9IlR5cGUiPgogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgdGl0bGU9ImtleVRoZW4iIHZhbHVlPSJ0aGVuIj4KICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIHRpdGxlPSJkYmxDbGlja1RvRXhwYW5kIiB2YWx1ZT0iRG91YmxlIGNsaWNrIHRvIGV4cGFuZCI+CiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiB0aXRsZT0iYWN0aW9ucyIgdmFsdWU9IkFjdGlvbnMiPgogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgdGl0bGU9InJlbW92ZUl0ZW0iIHZhbHVlPSJSZW1vdmUiPgogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgdGl0bGU9IndvcmtmbG93IiB2YWx1ZT0iV29ya2Zsb3ciPgogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgdGl0bGU9ImxhYmVsTmV3IiB2YWx1ZT0iTmV3IExhYmVsIj4KICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIHRpdGxlPSJpc3N1ZUFjdGlvbnNIaW50IiB2YWx1ZT0iQmVnaW4gdHlwaW5nIGZvciBhdmFpbGFibGUgb3BlcmF0aW9ucyBvciBwcmVzcyBkb3duIHRvIHNlZSBhbGwiPgogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgdGl0bGU9ImNsb3NlbGluayIgdmFsdWU9IkNsb3NlIj4KICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIHRpdGxlPSJkb3RPcGVyYXRpb25zIiB2YWx1ZT0iT3BlcmF0aW9ucyI+CiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiB0aXRsZT0iZG90TG9hZGluZyIgdmFsdWU9IkxvYWRpbmcuLi4iPgogICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgdGl0bGU9ImZyb3RoZXJTdWdnZXN0aW9ucyIgdmFsdWU9IlN1Z2dlc3Rpb25zIj4KICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIHRpdGxlPSJmcm90aGVyTm9tYXRjaGVzIiB2YWx1ZT0iTm8gTWF0Y2hlcyI+CiAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiB0aXRsZT0ibXVsdGlzZWxlY3RWZXJzaW9uc0Vycm9yIiB2YWx1ZT0iezB9IGlzIG5vdCBhIHZhbGlkIHZlcnNpb24uIj4KICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIHRpdGxlPSJtdWx0aXNlbGVjdENvbXBvbmVudHNFcnJvciIgdmFsdWU9InswfSBpcyBub3QgYSB2YWxpZCBjb21wb25lbnQuIj4KICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIHRpdGxlPSJtdWx0aXNlbGVjdEdlbmVyaWNFcnJvciIgdmFsdWU9IlRoZSB2YWx1ZSB7MH0gaXMgaW52YWxpZC4iPgo8L2ZpZWxkc2V0PgoKICAgIDwvZm9vdGVyPgo8L2Rpdj4KPC9ib2R5Pgo8L2h0bWw+Cg==
    http_version: 
  recorded_at: Thu, 19 Nov 2015 19:37:38 GMT
- request:
    method: get
    uri: https://gitlab.com/api/v4/projects/https:%2F%2Fissues.apache.org%2Fjira%2Fbrowse%2FAGILA-44
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Private-Token:
      - yk4sv48-tHyUJNBkcf56
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Server:
      - nginx
      Date:
      - Wed, 13 Jun 2018 15:43:32 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '35'
      Cache-Control:
      - no-cache
      Vary:
      - Origin
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Request-Id:
      - 2613e6d4-faf1-4e81-a332-0dab75384ba3
      X-Runtime:
      - '0.042137'
      Ratelimit-Limit:
      - '600'
      Ratelimit-Observed:
      - '1'
      Ratelimit-Remaining:
      - '599'
      Ratelimit-Reset:
      - '1528904672'
      Ratelimit-Resettime:
      - Thu, 13 Jun 2018 15:44:32 GMT
    body:
      encoding: UTF-8
      string: '{"message":"404 Project Not Found"}'
    http_version: 
  recorded_at: Wed, 13 Jun 2018 15:43:32 GMT
recorded_with: VCR 4.0.0
