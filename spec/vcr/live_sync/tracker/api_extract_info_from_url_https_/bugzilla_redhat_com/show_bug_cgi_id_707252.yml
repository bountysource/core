---
http_interactions:
- request:
    method: get
    uri: https://bugzilla.redhat.com/show_bug.cgi?id=707252
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.36 (KHTML,
        like Gecko) Chrome/35.0.1916.153 Safari/537.36
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 19 Nov 2015 19:37:44 GMT
      Server:
      - Apache
      X-Xss-Protection:
      - 1; mode=block
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Vary:
      - Accept-Encoding,User-Agent
      Content-Type:
      - text/html; charset=UTF-8
      Set-Cookie:
      - Bugzilla_login_request_cookie=PvtqAkxTvw; domain=bugzilla.redhat.com; path=/;
        HttpOnly
      Connection:
      - close
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Thu, 19 Nov 2015 19:37:45 GMT
- request:
    method: get
    uri: https://gitlab.com/api/v4/projects/https:%2F%2Fbugzilla.redhat.com%2Fshow_bug.cgi%3Fid=707252
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Private-Token:
      - yk4sv48-tHyUJNBkcf56
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Server:
      - nginx
      Date:
      - Wed, 13 Jun 2018 15:43:37 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '35'
      Cache-Control:
      - no-cache
      Vary:
      - Origin
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Request-Id:
      - 11c521f5-c7d9-4390-92ef-249b2c9f015f
      X-Runtime:
      - '0.037640'
      Ratelimit-Limit:
      - '600'
      Ratelimit-Observed:
      - '5'
      Ratelimit-Remaining:
      - '595'
      Ratelimit-Reset:
      - '1528904677'
      Ratelimit-Resettime:
      - Thu, 13 Jun 2018 15:44:37 GMT
    body:
      encoding: UTF-8
      string: '{"message":"404 Project Not Found"}'
    http_version: 
  recorded_at: Wed, 13 Jun 2018 15:43:37 GMT
recorded_with: VCR 4.0.0
