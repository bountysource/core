---
http_interactions:
- request:
    method: get
    uri: https://bugs.webkit.org/show_bug.cgi?id=65711
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.36 (KHTML,
        like Gecko) Chrome/35.0.1916.153 Safari/537.36
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 19 Nov 2015 19:37:46 GMT
      Server:
      - Apache/2.2
      X-Xss-Protection:
      - 1; mode=block
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Access-Control-Allow-Origin:
      - "*"
      Strict-Transport-Security:
      - max-age=7776000
      Connection:
      - close
      Transfer-Encoding:
      - chunked
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Thu, 19 Nov 2015 19:37:47 GMT
- request:
    method: get
    uri: https://gitlab.com/api/v4/projects/https:%2F%2Fbugs.webkit.org%2Fshow_bug.cgi%3Fid=65711
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Private-Token:
      - yk4sv48-tHyUJNBkcf56
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Server:
      - nginx
      Date:
      - Wed, 13 Jun 2018 15:43:38 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '35'
      Cache-Control:
      - no-cache
      Vary:
      - Origin
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Request-Id:
      - 5dcccc8a-1eb3-4534-8ee2-7d332d9d1c54
      X-Runtime:
      - '0.029412'
      Ratelimit-Limit:
      - '600'
      Ratelimit-Observed:
      - '6'
      Ratelimit-Remaining:
      - '594'
      Ratelimit-Reset:
      - '1528904678'
      Ratelimit-Resettime:
      - Thu, 13 Jun 2018 15:44:38 GMT
    body:
      encoding: UTF-8
      string: '{"message":"404 Project Not Found"}'
    http_version: 
  recorded_at: Wed, 13 Jun 2018 15:43:38 GMT
recorded_with: VCR 4.0.0
