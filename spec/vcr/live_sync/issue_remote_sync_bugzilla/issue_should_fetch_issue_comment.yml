---
http_interactions:
- request:
    method: get
    uri: https://d.puremagic.com/issues/show_bug.cgi?id=314
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.36 (KHTML,
        like Gecko) Chrome/35.0.1916.153 Safari/537.36
  response:
    status:
      code: 301
      message: Moved Permanently
    headers:
      Date:
      - Thu, 19 Nov 2015 19:32:57 GMT
      Server:
      - Apache/2.2.22 (Ubuntu)
      Location:
      - https://issues.dlang.org/show_bug.cgi?id=314
      Vary:
      - Accept-Encoding
      Content-Length:
      - '334'
      Content-Type:
      - text/html; charset=iso-8859-1
    body:
      encoding: UTF-8
      string: |
        <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//EN">
        <html><head>
        <title>301 Moved Permanently</title>
        </head><body>
        <h1>Moved Permanently</h1>
        <p>The document has moved <a href="https://issues.dlang.org/show_bug.cgi?id=314">here</a>.</p>
        <hr>
        <address>Apache/2.2.22 (Ubuntu) Server at d.puremagic.com Port 443</address>
        </body></html>
    http_version: 
  recorded_at: Thu, 19 Nov 2015 19:32:57 GMT
- request:
    method: get
    uri: https://issues.dlang.org/show_bug.cgi?id=314
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.36 (KHTML,
        like Gecko) Chrome/35.0.1916.153 Safari/537.36
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 19 Nov 2015 19:32:58 GMT
      Server:
      - Apache/2.2.31 (Amazon)
      X-Xss-Protection:
      - 1; mode=block
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Transfer-Encoding:
      - chunked
      Content-Type:
      - text/html; charset=UTF-8
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Thu, 19 Nov 2015 19:32:59 GMT
- request:
    method: get
    uri: https://issues.dlang.org/show_bug.cgi?ctype=xml&id=314
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.36 (KHTML,
        like Gecko) Chrome/35.0.1916.153 Safari/537.36
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 19 Nov 2015 19:32:59 GMT
      Server:
      - Apache/2.2.31 (Amazon)
      X-Xss-Protection:
      - 1; mode=block
      X-Frame-Options:
      - SAMEORIGIN
      X-Content-Type-Options:
      - nosniff
      Transfer-Encoding:
      - chunked
      Content-Type:
      - application/xml; charset=UTF-8
    body:
      encoding: UTF-8
      string: "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?>\n<!DOCTYPE
        bugzilla SYSTEM \"https://issues.dlang.org/page.cgi?id=bugzilla.dtd\">\n\n<bugzilla
        version=\"4.4.2\"\n          urlbase=\"https://issues.dlang.org/\"\n          \n
        \         maintainer=\"braddr@puremagic.com\"\n>\n\n    <bug>\n          <bug_id>314</bug_id>\n
        \         \n          <creation_ts>2006-08-27 09:42:00 +0000</creation_ts>\n
        \         <short_desc>[module] Static, renamed, and selective imports are
        always public</short_desc>\n          <delta_ts>2015-06-09 05:11:59 +0000</delta_ts>\n
        \         <reporter_accessible>1</reporter_accessible>\n          <cclist_accessible>1</cclist_accessible>\n
        \         <classification_id>1</classification_id>\n          <classification>Unclassified</classification>\n
        \         <product>D</product>\n          <component>dmd</component>\n          <version>D2</version>\n
        \         <rep_platform>All</rep_platform>\n          <op_sys>All</op_sys>\n
        \         <bug_status>REOPENED</bug_status>\n          <resolution></resolution>\n
        \         \n          \n          <bug_file_loc></bug_file_loc>\n          <status_whiteboard></status_whiteboard>\n
        \         <keywords>accepts-invalid, bounty, patch, pull</keywords>\n          <priority>P2</priority>\n
        \         <bug_severity>major</bug_severity>\n          <target_milestone>---</target_milestone>\n
        \         <dependson>313</dependson>\n          <blocked>2830</blocked>\n
        \   \n    <blocked>3108</blocked>\n          <everconfirmed>1</everconfirmed>\n
        \         <reporter name=\"Matti Niemenmaa\">matti.niemenmaa+dbugzilla</reporter>\n
        \         <assigned_to name=\"Walter Bright\">bugzilla</assigned_to>\n          <cc>2korden</cc>\n
        \   \n    <cc>aldacron</cc>\n    \n    <cc>andrej.mitrovich</cc>\n    \n    <cc>blah38621</cc>\n
        \   \n    <cc>bruno.do.medeiros+deebugz</cc>\n    \n    <cc>clugdbug</cc>\n
        \   \n    <cc>hsteoh</cc>\n    \n    <cc>issues.dlang</cc>\n    \n    <cc>Jesse.K.Phillips+D</cc>\n
        \   \n    <cc>kamm-removethis</cc>\n    \n    <cc>kroeplin.d</cc>\n    \n
        \   <cc>leandro.lucarella</cc>\n    \n    <cc>michal.minich</cc>\n    \n    <cc>monarchdodra</cc>\n
        \   \n    <cc>mrmocool</cc>\n    \n    <cc>nfxjfg</cc>\n    \n    <cc>sean</cc>\n
        \   \n    <cc>smjg</cc>\n    \n    <cc>spam</cc>\n    \n    <cc>strtr</cc>\n
        \   \n    <cc>tomas</cc>\n    \n    <cc>wbaxter</cc>\n          <votes>44</votes>\n\n
        \     \n\n      \n\n      \n\n          <comment_sort_order>oldest_to_newest</comment_sort_order>
        \ \n          <long_desc isprivate=\"0\" >\n    <commentid>856</commentid>\n
        \   <comment_count>0</comment_count>\n    <who name=\"Matti Niemenmaa\">matti.niemenmaa+dbugzilla</who>\n
        \   <bug_when>2006-08-27 09:42:48 +0000</bug_when>\n    <thetext>In file a.d:\n--\n//
        explicit privates unnecessary but added for clarity\nversion(stat) private
        static import std.stdio;\nversion(rena) private import io = std.stdio;\nversion(sele)
        private import std.stdio : writefln;\n--\nIn file b.d:\n--\nimport a;\n\nvoid
        main() {\n\tversion(stat) std.stdio.writefln(&quot;This should not work.&quot;);\n\tversion(rena)
        io.writefln(&quot;This should not work.&quot;);\n\tversion(sele) writefln(&quot;This
        should not work.&quot;);\n}\n--\n\nCompiled with version=stat, version=rena,
        or version=sele, the program outputs &quot;This should not work.&quot;, when
        it shouldn&apos;t even compile.\n\nNote that the version(stat) case is dependant
        on Issue 313.</thetext>\n  </long_desc><long_desc isprivate=\"0\" >\n    <commentid>2402</commentid>\n
        \   <comment_count>1</comment_count>\n    <who name=\"david\">davidl</who>\n
        \   <bug_when>2007-01-23 04:30:45 +0000</bug_when>\n    <thetext>errr, d 1.0
        still has this bug.. but bug 313&apos;s example doesn&apos;t work any more.</thetext>\n
        \ </long_desc><long_desc isprivate=\"0\" >\n    <commentid>2491</commentid>\n
        \   <comment_count>2</comment_count>\n    <who name=\"\">torhu</who>\n    <bug_when>2007-01-29
        01:56:03 +0000</bug_when>\n    <thetext>*** Bug 604 has been marked as a duplicate
        of this bug. ***</thetext>\n  </long_desc><long_desc isprivate=\"0\" >\n    <commentid>6001</commentid>\n
        \   <comment_count>3</comment_count>\n      <attachid>246</attachid>\n    <who
        name=\"Christian Kamm\">kamm-removethis</who>\n    <bug_when>2008-04-16 14:29:23
        +0000</bug_when>\n    <thetext>Created attachment 246\nFix by checking protection
        attribute for all nonlocal symbols\n\nThe patch has been tested rudimentarily
        on llvmdc. I have commented the two crucial changes. \n\nEven if there is
        a good reason for not checking the protection attribute of all symbols, it
        should still be simple to special case this fix for import declarations and
        the alias declarations generated by them.\n\nNote that\n\nmodule c;\nint var;\n--\nmodule
        b;\nimport c;\n--\nmodule a;\nimport b;\n\nvoid main {\n  var = 1; // var:
        undefined identifier (no change)\n  c.var = 1; // c: undefined identifier
        (instead of ok)\n  b.c.var = 1; // still ok\n}</thetext>\n  </long_desc><long_desc
        isprivate=\"0\" >\n    <commentid>6009</commentid>\n    <comment_count>4</comment_count>\n
        \   <who name=\"Christian Kamm\">kamm-removethis</who>\n    <bug_when>2008-04-17
        15:26:09 +0000</bug_when>\n    <thetext>(In reply to comment #3)\n&gt; Created
        an attachment\n&gt; Fix by checking protection attribute for all nonlocal
        symbols\n\nI aimed a little high; this patch does not add checks for the protection
        attribute for all nonlocal symbols. It adds checks only for the ones contained
        in ScopeDsymbol and only in a coarse (public or private) way.\n\nBut doing
        that consistently is a different bug/enhancement anyway. Using a variation
        of this patch to fix the import issue bugs 313 and 314 describe should still
        be fine.\n</thetext>\n  </long_desc><long_desc isprivate=\"0\" >\n    <commentid>7127</commentid>\n
        \   <comment_count>5</comment_count>\n    <who name=\"Jarrett Billingsley\">jarrett.billingsley</who>\n
        \   <bug_when>2008-09-02 22:17:53 +0000</bug_when>\n    <thetext>*** Bug 2330
        has been marked as a duplicate of this bug. ***</thetext>\n  </long_desc><long_desc
        isprivate=\"0\" >\n    <commentid>9354</commentid>\n    <comment_count>6</comment_count>\n
        \     <attachid>364</attachid>\n    <who name=\"Christian Kamm\">kamm-removethis</who>\n
        \   <bug_when>2009-05-12 11:22:49 +0000</bug_when>\n    <thetext>Created attachment
        364\npatch\n\nIgnores nonlocal private symbols when looking up and identifier.
        Sets the protection attribute of imports and generated aliases to the protection
        level specified for the import.</thetext>\n  </long_desc><long_desc isprivate=\"0\"
        >\n    <commentid>9361</commentid>\n    <comment_count>7</comment_count>\n
        \   <who name=\"Walter Bright\">bugzilla</who>\n    <bug_when>2009-05-12 19:04:58
        +0000</bug_when>\n    <thetext>Access protection is defined to happen after
        lookup and overload resolution. Making private symbols invisible defeats this,
        and also doesn&apos;t work as the overload list is a linked list, and making
        the head of it private would hide the rest of the possibly public overloads.</thetext>\n
        \ </long_desc><long_desc isprivate=\"0\" >\n    <commentid>9375</commentid>\n
        \   <comment_count>8</comment_count>\n    <who name=\"Christian Kamm\">kamm-removethis</who>\n
        \   <bug_when>2009-05-13 10:45:04 +0000</bug_when>\n    <thetext>Thanks for
        the thorough reply. I disagree that overload resolution happens strictly before
        access checks. Consider:\n\na.d --\nvoid foo(int) { printf(&quot;foo-i&quot;);
        }\n\nb.d --\nimport a : foo;\nvoid foo(float) { printf(&quot;foo-f&quot;);
        }\n\nc.d --\nimport b;\nvoid main() { int i; foo(i); }\n\nLike this, with
        dmd 1.043, you get &quot;foo-i&quot;. If you remove the selective import of
        foo, you get &quot;foo-f&quot;. Private imports are invisible at lookup-time,
        but renamed or selective private imports aren&apos;t. Therefore it seems to
        me that making these invisible is the right thing to do. \n\nThe patch does
        have a problem with overloads though and that ought to be fixed. Would you
        accept a patch that works along the same lines but handles overloads correctly?</thetext>\n
        \ </long_desc><long_desc isprivate=\"0\" >\n    <commentid>9476</commentid>\n
        \   <comment_count>9</comment_count>\n    <who name=\"Christian Kamm\">kamm-removethis</who>\n
        \   <bug_when>2009-05-16 05:54:34 +0000</bug_when>\n    <thetext>I&apos;ve
        updated the patch. Treating overloads correctly complicated the issue quite
        a bit. What I&apos;ve done is to store the import protection in the AliasDeclarations
        and FuncAliasDeclarations generated by selective and renamed imports. These
        are then ignored when traversing the overload tree if they are in a different
        module than the one initiating the traversal.\n\nThat means, however, that
        overload resolution needs to know which module is triggering it and has led
        to a lot of module passing. :/\n\nI&apos;ve also made the hiding of private
        symbols in ScopeDsymbol::search specific to AliasDeclarations generated by
        ImportStatement. Making the protection attributes apply consistently to more
        than Func- and VarDecls is a separate issue.\n\nThe LDC changesets are:\nhttp://www.dsource.org/projects/ldc/changeset/1358\nhttp://www.dsource.org/projects/ldc/changeset/1362\nI
        can make a patch against DMD if requested.</thetext>\n  </long_desc><long_desc
        isprivate=\"0\" >\n    <commentid>10483</commentid>\n    <comment_count>10</comment_count>\n
        \   <who name=\"Stewart Gordon\">smjg</who>\n    <bug_when>2009-08-20 11:57:14
        +0000</bug_when>\n    <thetext>(In reply to comment #7)\n&gt; Access protection
        is defined to happen after lookup and overload resolution.\n\nDefined where
        in the spec?\n\n&gt; Making private symbols invisible defeats this,\n\nWould
        it be reasonable to change it as I described in the final paragraph of issue
        3254 comment 3?\n\n&gt; and also doesn&apos;t work as the\n&gt; overload list
        is a linked list, and making the head of it private would hide\n&gt; the rest
        of the possibly public overloads.\n\nThat&apos;s obviously an implementation
        issue.  Possible ways to deal with this:\n\n(a) have multiple linked lists,
        one for each protection attribute\n(b) build the linked list in such a way
        that the head element will always be one of the ones of the most public access
        level that exists among the overloads</thetext>\n  </long_desc><long_desc
        isprivate=\"0\" >\n    <commentid>10582</commentid>\n    <comment_count>11</comment_count>\n
        \   <who name=\"Matti Niemenmaa\">matti.niemenmaa+dbugzilla</who>\n    <bug_when>2009-08-31
        11:56:41 +0000</bug_when>\n    <thetext>*** Issue 3275 has been marked as
        a duplicate of this issue. ***</thetext>\n  </long_desc><long_desc isprivate=\"0\"
        >\n    <commentid>13996</commentid>\n    <comment_count>12</comment_count>\n
        \   <who name=\"\">nfxjfg</who>\n    <bug_when>2010-05-07 02:14:37 +0000</bug_when>\n
        \   <thetext>Whenever I compile some code in ldc, that has been developed
        with dmd, I get compilation errors related to this bug. That&apos;s because
        ldc (at least partially) fixed it. As far as I can tell, ldc never rejected
        actually valid code related to this bug.\n\nIt&apos;s a bit ridiculous. What
        keeps back the patches going into dmd?</thetext>\n  </long_desc><long_desc
        isprivate=\"0\" >\n    <commentid>13997</commentid>\n    <comment_count>13</comment_count>\n
        \   <who name=\"Tomas Lindquist Olsen\">tomas</who>\n    <bug_when>2010-05-07
        02:42:38 +0000</bug_when>\n    <thetext>stubbornness ?</thetext>\n  </long_desc><long_desc
        isprivate=\"0\" >\n    <commentid>14285</commentid>\n    <comment_count>14</comment_count>\n
        \   <who name=\"Trass3r\">mrmocool</who>\n    <bug_when>2010-05-26 15:10:04
        +0000</bug_when>\n    <thetext>when will this be fixed?</thetext>\n  </long_desc><long_desc
        isprivate=\"0\" >\n    <commentid>14287</commentid>\n    <comment_count>15</comment_count>\n
        \   <who name=\"Leandro Lucarella\">leandro.lucarella</who>\n    <bug_when>2010-05-26
        15:19:42 +0000</bug_when>\n    <thetext>In D4, maybe =P\n\nDon&apos;t be impatient,
        is just number 1 in votes!</thetext>\n  </long_desc><long_desc isprivate=\"0\"
        >\n    <commentid>14290</commentid>\n    <comment_count>16</comment_count>\n
        \   <who name=\"Trass3r\">mrmocool</who>\n    <bug_when>2010-05-26 15:42:36
        +0000</bug_when>\n    <thetext>Well that&apos;s the point.\n- 32 votes!\n-
        present since v0.165!\n- patch is available that seems to work for ldc</thetext>\n
        \ </long_desc><long_desc isprivate=\"0\" >\n    <commentid>14291</commentid>\n
        \   <comment_count>17</comment_count>\n    <who name=\"Leandro Lucarella\">leandro.lucarella</who>\n
        \   <bug_when>2010-05-26 19:01:01 +0000</bug_when>\n    <thetext>I was being
        sarcastic =)</thetext>\n  </long_desc><long_desc isprivate=\"0\" >\n    <commentid>15672</commentid>\n
        \   <comment_count>18</comment_count>\n    <who name=\"Don\">clugdbug</who>\n
        \   <bug_when>2010-08-11 12:48:59 +0000</bug_when>\n    <thetext>I have tried
        this patch on the latest D2. I&apos;ve found two problems with it:\n(1) object
        needs special treatment, it must not default to private.\n(2) It completely
        fails for selective imports.\n\nThe first issue is trivial to fix; the main
        patch in import.c becomes:\nvoid Import::importAll(Scope *sc)\n{\n    if (!mod)\n
        \   {\n       load(sc);\n       mod-&gt;importAll(0);\n\n+           /* Default
        to private importing, except for object.\n+            */\n+      if (id !=
        Id::object) {\n+        protection = sc-&gt;protection;\n+    \t if (!sc-&gt;explicitProtection)\n+
        \           protection = PROTprivate;\n+      }\n\n\nOTOH applying the patch
        has shown up several bugs in druntime and in the compiler test suite.</thetext>\n
        \ </long_desc><long_desc isprivate=\"0\" >\n    <commentid>15694</commentid>\n
        \   <comment_count>19</comment_count>\n    <who name=\"Christian Kamm\">kamm-removethis</who>\n
        \   <bug_when>2010-08-11 22:09:51 +0000</bug_when>\n    <thetext>Don, which
        version of the patch did you apply - the one attached here or the one I applied
        to LDC? Selective imports work correctly in LDC, so maybe there&apos;s some
        extra work needed for D2. I also expect the patch to require some work with
        regard to overload resolution, it works differently in D2.</thetext>\n  </long_desc><long_desc
        isprivate=\"0\" >\n    <commentid>15697</commentid>\n    <comment_count>20</comment_count>\n
        \   <who name=\"Don\">clugdbug</who>\n    <bug_when>2010-08-12 01:04:26 +0000</bug_when>\n
        \   <thetext>(In reply to comment #19)\n&gt; Don, which version of the patch
        did you apply - the one attached here or the\n&gt; one I applied to LDC? Selective
        imports work correctly in LDC, so maybe there&apos;s\n&gt; some extra work
        needed for D2. I also expect the patch to require some work\n&gt; with regard
        to overload resolution, it works differently in D2.\n\nThe one attached here.
        Although I&apos;ve found some problems with selective imports, I no longer
        think they are the fault of this patch. For example, the existing release
        of D1 doesn&apos;t like this example:\n---\nimport std.stdio : writefln;\nvoid
        main() {\n   std.stdio.writefln(&quot;xyz&quot;);\n}\n\ntest0.d(338): Error:
        undefined identifier std\nError: no property &apos;writefln&apos; for type
        &apos;TOK149&apos;\ntest0.d(338): Error: function expected before (), not
        __error of type TOK149\n---\nAfter applying the patch and my change to Id::object,
        and fixing a bug in each of druntime, Phobos, and the test suite, all Phobos
        unittests pass, and the DMD test suite passes all tests. Looks great to me.</thetext>\n
        \ </long_desc><long_desc isprivate=\"0\" >\n    <commentid>15701</commentid>\n
        \   <comment_count>21</comment_count>\n    <who name=\"\">nfxjfg</who>\n    <bug_when>2010-08-12
        06:11:44 +0000</bug_when>\n    <thetext>In my understanding, &quot;import
        std.stdio : writefln;&quot; only imports the name &quot;writefln&quot;, not
        &quot;std&quot; and &quot;writefln&quot;. If the user wants &quot;std&quot;,
        he has to write &quot;static import std.stdio;&quot;. I would assume your
        example is invalid and is expected to fail.\n\nWhy would the user do &quot;import
        std.stdio : writefln;&quot; if he doesn&apos;t use writefln directly? Is &quot;std.stdio.writefln&quot;
        the only name he&apos;s supposed to be able to use here? If yes, what the
        hell is the use of that?</thetext>\n  </long_desc><long_desc isprivate=\"0\"
        >\n    <commentid>15707</commentid>\n    <comment_count>22</comment_count>\n
        \   <who name=\"Don\">clugdbug</who>\n    <bug_when>2010-08-12 07:09:34 +0000</bug_when>\n
        \   <thetext>(In reply to comment #21)\n&gt; In my understanding, &quot;import
        std.stdio : writefln;&quot; only imports the name\n&gt; &quot;writefln&quot;,
        not &quot;std&quot; and &quot;writefln&quot;. If the user wants &quot;std&quot;,
        he has to write\n&gt; &quot;static import std.stdio;&quot;. I would assume
        your example is invalid and is\n&gt; expected to fail.\n&gt; \n&gt; Why would
        the user do &quot;import std.stdio : writefln;&quot; if he doesn&apos;t use
        writefln\n&gt; directly? Is &quot;std.stdio.writefln&quot; the only name he&apos;s
        supposed to be able to use\n&gt; here? If yes, what the hell is the use of
        that?\n\nIt&apos;s invalid code. But you should never see TOKxxx in an error
        message. It indicates something is fouled up.</thetext>\n  </long_desc><long_desc
        isprivate=\"0\" >\n    <commentid>15709</commentid>\n    <comment_count>23</comment_count>\n
        \   <who name=\"Leandro Lucarella\">leandro.lucarella</who>\n    <bug_when>2010-08-12
        07:25:12 +0000</bug_when>\n    <thetext>(In reply to comment #22)\n&gt; (In
        reply to comment #21)\n&gt; &gt; In my understanding, &quot;import std.stdio
        : writefln;&quot; only imports the name\n&gt; &gt; &quot;writefln&quot;, not
        &quot;std&quot; and &quot;writefln&quot;. If the user wants &quot;std&quot;,
        he has to write\n&gt; &gt; &quot;static import std.stdio;&quot;. I would assume
        your example is invalid and is\n&gt; &gt; expected to fail.\n&gt; &gt; \n&gt;
        &gt; Why would the user do &quot;import std.stdio : writefln;&quot; if he
        doesn&apos;t use writefln\n&gt; &gt; directly? Is &quot;std.stdio.writefln&quot;
        the only name he&apos;s supposed to be able to use\n&gt; &gt; here? If yes,
        what the hell is the use of that?\n&gt; \n&gt; It&apos;s invalid code. But
        you should never see TOKxxx in an error message. It\n&gt; indicates something
        is fouled up.\n\nOne more for bug 4329 =)</thetext>\n  </long_desc><long_desc
        isprivate=\"0\" >\n    <commentid>15719</commentid>\n    <comment_count>24</comment_count>\n
        \   <who name=\"Christian Kamm\">kamm-removethis</who>\n    <bug_when>2010-08-12
        10:33:50 +0000</bug_when>\n    <thetext>(In reply to comment #20)\n&gt; (In
        reply to comment #19)\n&gt; &gt; Don, which version of the patch did you apply
        - the one attached here or the\n&gt; &gt; one I applied to LDC? \n&gt; \n&gt;
        The one attached here.\n\nWell, ass Walter pointed out the attached patch
        has problems with overload resolution. The corrected patch doesn&apos;t though.
        If you&apos;re interested in looking at it, I could make it work against the
        D2 frontend and post it here.\n\nI don&apos;t want the effort to be in vain
        though, so could you check with Walter whether he&apos;d accept a patch that
        works as described in comment #9?</thetext>\n  </long_desc><long_desc isprivate=\"0\"
        >\n    <commentid>15720</commentid>\n    <comment_count>25</comment_count>\n
        \   <who name=\"Christian Kamm\">kamm-removethis</who>\n    <bug_when>2010-08-12
        10:45:00 +0000</bug_when>\n    <thetext>Gah, can you edit comments somehow?
        That typo is extremely embarrassing.</thetext>\n  </long_desc><long_desc isprivate=\"0\"
        >\n    <commentid>15724</commentid>\n    <comment_count>26</comment_count>\n
        \     <attachid>364</attachid>\n    <who name=\"Don\">clugdbug</who>\n    <bug_when>2010-08-12
        12:08:52 +0000</bug_when>\n    <thetext>Comment on attachment 364\npatch\n\nMarking
        this patch as obsolete, since it is not correct.</thetext>\n  </long_desc><long_desc
        isprivate=\"0\" >\n    <commentid>15946</commentid>\n    <comment_count>27</comment_count>\n
        \   <who name=\"Don\">clugdbug</who>\n    <bug_when>2010-08-19 07:39:48 +0000</bug_when>\n
        \   <thetext>(In reply to comment #24)\n&gt; (In reply to comment #20)\n&gt;
        &gt; (In reply to comment #19)\n&gt; &gt; &gt; Don, which version of the patch
        did you apply - the one attached here or the\n&gt; &gt; &gt; one I applied
        to LDC? \n&gt; &gt; \n&gt; &gt; The one attached here.\n&gt; \n&gt; Well,
        as Walter pointed out the attached patch has problems with overload\n&gt;
        resolution. The corrected patch doesn&apos;t though. If you&apos;re interested
        in looking\n&gt; at it, I could make it work against the D2 frontend and post
        it here.\n&gt; \n&gt; I don&apos;t want the effort to be in vain though, so
        could you check with Walter\n&gt; whether he&apos;d accept a patch that works
        as described in comment #9?\n\nFrom discussion with Walter --\nIt&apos;s too
        difficult to evaluate the patch in its present form. It&apos;s in two parts,
        both diffed against the LDC codebase rather than DMD, and the context is really
        unclear -- it&apos;s not clear which functions are being patched. I don&apos;t
        think a complete patch is required for evaluation -- in fact, a complete patch
        would be  more difficult to quickly understand. But if you can write the essence
        of the code here, which I think is really only a couple of functions, that
        should be enough. And with a explanation of what it&apos;s doing. Leave out
        the myriad of changes which are just passing the module handle around.</thetext>\n
        \ </long_desc><long_desc isprivate=\"0\" >\n    <commentid>15985</commentid>\n
        \   <comment_count>28</comment_count>\n    <who name=\"Christian Kamm\">kamm-removethis</who>\n
        \   <bug_when>2010-08-20 07:48:05 +0000</bug_when>\n    <thetext>&gt; But
        if you can write the\n&gt; essence of the code here, which I think is really
        only a couple of functions,\n&gt; that should be enough.\n\nAliasDeclaration
        and FuncAliasDeclaration get a new &apos;importprot&apos; member which is
        set for aliases generated by the import declaration and stores the import&apos;s
        protection.\n\nIn ScopeDSymbol::search, we discard aliases which shouldn&apos;t
        be accessible - unless it&apos;s a FuncAliasDeclaration, to avoid making a
        chain invisible because the first member is privately imported:\n+    // hide
        the aliases generated by selective or renamed private imports\n+    if (s
        &amp;&amp; flags &amp; 1)\n+        if (AliasDeclaration* ad = s-&gt;isAliasDeclaration())\n+\t
        \   // may be a private alias to a function that is overloaded. these\n+\t
        \   // are sorted out during overload resolution, accept them here\n+\t    if
        (ad-&gt;importprot == PROTprivate &amp;&amp; !ad-&gt;aliassym-&gt;isFuncAliasDeclaration())\n+\t\ts
        = NULL;\n\nAnd for overload resolution, skip over functions that should be
        invisible:\n-int overloadApply(FuncDeclaration *fstart,\n+int overloadApply(Module*
        from, FuncDeclaration *fstart,\n \tint (*fp)(void *, FuncDeclaration *),\n
        \tvoid *param)\n...\n \tif (fa)\n \t{\n-\t    if (overloadApply(fa-&gt;funcalias,
        fp, param))\n-\t\treturn 1;\n+\t    if (fa-&gt;getModule() == from || fa-&gt;importprot
        != PROTprivate)\n+\t\tif (overloadApply(from, fa-&gt;funcalias, fp, param))\n+\t\t
        \   return 1;\n \t    next = fa-&gt;overnext;</thetext>\n  </long_desc><long_desc
        isprivate=\"0\" >\n    <commentid>17462</commentid>\n    <comment_count>29</comment_count>\n
        \   <who name=\"\">strtr</who>\n    <bug_when>2010-10-28 22:26:20 +0000</bug_when>\n
        \   <thetext>Frelling bug got me again :(\n\nAny progress?</thetext>\n  </long_desc><long_desc
        isprivate=\"0\" >\n    <commentid>17601</commentid>\n    <comment_count>30</comment_count>\n
        \   <who name=\"\">strtr</who>\n    <bug_when>2010-11-03 18:36:23 +0000</bug_when>\n
        \   <thetext>How embarrassing this might be, this needs a warning on the website.</thetext>\n
        \ </long_desc><long_desc isprivate=\"0\" >\n    <commentid>17602</commentid>\n
        \   <comment_count>31</comment_count>\n    <who name=\"\">strtr</who>\n    <bug_when>2010-11-03
        18:39:07 +0000</bug_when>\n    <thetext>How embarrassing this might be, this
        needs a warning on the website.</thetext>\n  </long_desc><long_desc isprivate=\"0\"
        >\n    <commentid>21385</commentid>\n    <comment_count>32</comment_count>\n
        \   <who name=\"Mike Parker\">aldacron</who>\n    <bug_when>2011-05-29 00:10:41
        +0000</bug_when>\n    <thetext>I was just bitten by this one testing out a
        library I&apos;m developing. I use private selective imports in it quite heavily.
        It was confused when I started getting conflicts. It only took a minute or
        two to figure out what was going on, but now I have to go through and eliminate
        all of the selective imports. This bug renders them useless. I&apos;m amazed
        this has been open for so long. It seems like a pretty major issue to me.</thetext>\n
        \ </long_desc><long_desc isprivate=\"0\" >\n    <commentid>22450</commentid>\n
        \   <comment_count>33</comment_count>\n    <who name=\"Christian Kamm\">kamm-removethis</who>\n
        \   <bug_when>2011-07-03 11:40:11 +0000</bug_when>\n    <thetext>https://github.com/D-Programming-Language/dmd/pull/190</thetext>\n
        \ </long_desc><long_desc isprivate=\"0\" >\n    <commentid>25098</commentid>\n
        \   <comment_count>34</comment_count>\n    <who name=\"Leandro Lucarella\">leandro.lucarella</who>\n
        \   <bug_when>2011-11-09 06:23:50 +0000</bug_when>\n    <thetext>(In reply
        to comment #33)\n&gt; https://github.com/D-Programming-Language/dmd/pull/190\n\nSo
        it looks like the patch is good and ready, when are you planning to merge
        it?</thetext>\n  </long_desc><long_desc isprivate=\"0\" >\n    <commentid>26139</commentid>\n
        \   <comment_count>35</comment_count>\n    <who name=\"Walter Bright\">bugzilla</who>\n
        \   <bug_when>2012-01-01 14:26:53 +0000</bug_when>\n    <thetext>https://github.com/D-Programming-Language/dmd/commit/ff9fa25f3f7f3091787f7459e1950add6cff50b2\n\nhttps://github.com/D-Programming-Language/dmd/commit/93a643aba6f62db1b7658c2bfb51f9d0b576c337</thetext>\n
        \ </long_desc><long_desc isprivate=\"0\" >\n    <commentid>26145</commentid>\n
        \   <comment_count>36</comment_count>\n    <who name=\"Leandro Lucarella\">leandro.lucarella</who>\n
        \   <bug_when>2012-01-01 16:04:19 +0000</bug_when>\n    <thetext>And the most
        voted bug from all times (41 votes, the next most voted have 28 votes) finally
        get fixed.\n\nThanks for the persistence, ckamm!!! :)</thetext>\n  </long_desc><long_desc
        isprivate=\"0\" >\n    <commentid>27094</commentid>\n    <comment_count>37</comment_count>\n
        \   <who name=\"Don\">clugdbug</who>\n    <bug_when>2012-01-24 12:14:56 +0000</bug_when>\n
        \   <thetext>*** Issue 5161 has been marked as a duplicate of this issue.
        ***</thetext>\n  </long_desc><long_desc isprivate=\"0\" >\n    <commentid>27328</commentid>\n
        \   <comment_count>38</comment_count>\n    <who name=\"Walter Bright\">bugzilla</who>\n
        \   <bug_when>2012-01-29 17:13:18 +0000</bug_when>\n    <thetext>(In reply
        to comment #33)\n&gt; https://github.com/D-Programming-Language/dmd/pull/190\n\nThe
        pull breaks Issue 7373. Christian, can you have a look, please?</thetext>\n
        \ </long_desc><long_desc isprivate=\"0\" >\n    <commentid>28088</commentid>\n
        \   <comment_count>39</comment_count>\n    <who name=\"\">github-bugzilla</who>\n
        \   <bug_when>2012-02-12 17:18:07 +0000</bug_when>\n    <thetext>Commit pushed
        to master at https://github.com/D-Programming-Language/dmd\n\nhttps://github.com/D-Programming-Language/dmd/commit/c022036c8f9fea1672bb2c56edd610715f6335c8\nRevert
        &quot;Merge pull request #591 from ckamm/bug314&quot;\n\nThis reverts commit
        ff9fa25f3f7f3091787f7459e1950add6cff50b2, reversing\nchanges made to 227769c47847fd577d423469c656e7a72246553c.</thetext>\n
        \ </long_desc><long_desc isprivate=\"0\" >\n    <commentid>28111</commentid>\n
        \   <comment_count>40</comment_count>\n    <who name=\"Walter Bright\">bugzilla</who>\n
        \   <bug_when>2012-02-13 12:36:49 +0000</bug_when>\n    <thetext>Reopened
        because the original test case now fails again due to the revert.\n\nPlease,
        folks, when doing pull requests that fix problems, add the cases into the
        test suite. The current test suite passes even with the reversion, meaning
        that no useful test cases were added with the patch.</thetext>\n  </long_desc><long_desc
        isprivate=\"0\" >\n    <commentid>38347</commentid>\n    <comment_count>41</comment_count>\n
        \   <who name=\"Andrej Mitrovic\">andrej.mitrovich</who>\n    <bug_when>2013-02-15
        08:20:36 +0000</bug_when>\n    <thetext>*** Issue 9516 has been marked as
        a duplicate of this issue. ***</thetext>\n  </long_desc><long_desc isprivate=\"0\"
        >\n    <commentid>38710</commentid>\n    <comment_count>42</comment_count>\n
        \   <who name=\"Marco Leise\">Marco.Leise</who>\n    <bug_when>2013-02-24
        17:22:23 +0000</bug_when>\n    <thetext>(In reply to comment #21)\n&gt; In
        my understanding, &quot;import std.stdio : writefln;&quot; only imports the
        name\n&gt; &quot;writefln&quot;, not &quot;std&quot; and &quot;writefln&quot;.
        If the user wants &quot;std&quot;, he has to write\n&gt; &quot;static import
        std.stdio;&quot;. I would assume your example is invalid and is\n&gt; expected
        to fail.\n&gt; \n&gt; Why would the user do &quot;import std.stdio : writefln;&quot;
        if he doesn&apos;t use writefln\n&gt; directly? Is &quot;std.stdio.writefln&quot;
        the only name he&apos;s supposed to be able to use\n&gt; here? If yes, what
        the hell is the use of that?\n\nThe use case is this:\n\nimport std.stdio
        : File;\nimport std.stream : File;\n...\nnew std.stream.File(...);\n\nThere
        is no reason for that to fail.</thetext>\n  </long_desc><long_desc isprivate=\"0\"
        >\n    <commentid>42664</commentid>\n    <comment_count>43</comment_count>\n
        \   <who name=\"\">github-bugzilla</who>\n    <bug_when>2013-06-24 09:43:57
        +0000</bug_when>\n    <thetext>Commit pushed to master at https://github.com/D-Programming-Language/druntime\n\nhttps://github.com/D-Programming-Language/druntime/commit/efe7e94030d75780b16a4eaf45c8dfb789c899aa\nMerge
        pull request #532 from 9rnsr/fix_imports\n\nIssue 313 &amp; 314 - Add package
        access to rt.lifetime.BlkInfo</thetext>\n  </long_desc><long_desc isprivate=\"0\"
        >\n    <commentid>42681</commentid>\n    <comment_count>44</comment_count>\n
        \   <who name=\"\">github-bugzilla</who>\n    <bug_when>2013-06-24 18:48:57
        +0000</bug_when>\n    <thetext>Commits pushed to master at https://github.com/D-Programming-Language/phobos\n\nhttps://github.com/D-Programming-Language/phobos/commit/03a32d6fa4635543eed17b874fbf7a0330572ac3\nFix
        issue 313 &amp; 314\n\nhttps://github.com/D-Programming-Language/phobos/commit/b7216eae2e9ec73e186a713c59839fd91c9347b7\nMerge
        pull request #1368 from 9rnsr/fix_imports\n\nFix issue 313 &amp; 314 - Add
        necessary imports and fix FQN accesses</thetext>\n  </long_desc><long_desc
        isprivate=\"0\" >\n    <commentid>42684</commentid>\n    <comment_count>45</comment_count>\n
        \   <who name=\"Kenji Hara\">k.hara.pg</who>\n    <bug_when>2013-06-24 23:04:17
        +0000</bug_when>\n    <thetext>https://github.com/D-Programming-Language/dmd/pull/2256</thetext>\n
        \ </long_desc><long_desc isprivate=\"0\" >\n    <commentid>42891</commentid>\n
        \   <comment_count>46</comment_count>\n    <who name=\"\">monarchdodra</who>\n
        \   <bug_when>2013-06-30 04:56:52 +0000</bug_when>\n    <thetext>(In reply
        to comment #45)\n&gt; https://github.com/D-Programming-Language/dmd/pull/2256\n\nGot
        hit by this and was going to file a bug. Searched to see if it was already
        filed. Found this. Noticed it was issue number 314 =&gt; Looked at date: Filed
        7 years ago :/ Look inside: Fix was issued *4* days ago (!!!)\n\nThank you
        Kenji for your hard work :)</thetext>\n  </long_desc><long_desc isprivate=\"0\"
        >\n    <commentid>49502</commentid>\n    <comment_count>47</comment_count>\n
        \   <who name=\"\">github-bugzilla</who>\n    <bug_when>2013-12-24 00:31:41
        +0000</bug_when>\n    <thetext>Commits pushed to master at https://github.com/D-Programming-Language/phobos\n\nhttps://github.com/D-Programming-Language/phobos/commit/3e791f6bc6046e4ca7e9e650a573ffaa9f0c3403\nAdd
        import declarations for issue 313 &amp; 314\n\nhttps://github.com/D-Programming-Language/phobos/commit/e2e986c7b6533c9042dbbdc23960e287e206ea12\nMerge
        pull request #1811 from 9rnsr/fix_imports\n\nAdd import declarations for issue
        313 &amp; 314</thetext>\n  </long_desc><long_desc isprivate=\"0\" >\n    <commentid>53511</commentid>\n
        \   <comment_count>48</comment_count>\n    <who name=\"\">github-bugzilla</who>\n
        \   <bug_when>2014-04-23 10:16:55 +0000</bug_when>\n    <thetext>Commit pushed
        to master at https://github.com/D-Programming-Language/phobos\n\nhttps://github.com/D-Programming-Language/phobos/commit/21a2d202098900148878a0e358052b3ec15d8ac4\nAddress
        problems with issue 314</thetext>\n  </long_desc><long_desc isprivate=\"0\"
        >\n    <commentid>54521</commentid>\n    <comment_count>49</comment_count>\n
        \   <who name=\"Orvid King\">blah38621</who>\n    <bug_when>2014-05-28 03:03:21
        +0000</bug_when>\n    <thetext>So, can this bug finally be marked as fixed
        now that the PRs for it have been \nmerged?</thetext>\n  </long_desc><long_desc
        isprivate=\"0\" >\n    <commentid>54522</commentid>\n    <comment_count>50</comment_count>\n
        \   <who name=\"Kenji Hara\">k.hara.pg</who>\n    <bug_when>2014-05-28 04:02:48
        +0000</bug_when>\n    <thetext>(In reply to Orvid King from comment #49)\n&gt;
        So, can this bug finally be marked as fixed now that the PRs for it have\n&gt;
        been merged?\n\nNo. Some behavior changed whcch introduced by the merged PR
        (#2256) could not get agreement, and it was finally reverted. So this issue
        is not yet fixed in git-head.\n\nInstead of that, I&apos;m opening more conservative
        fix for the issues 313 &amp; 314.\n\nhttps://github.com/D-Programming-Language/dmd/pull/3407</thetext>\n
        \ </long_desc>\n      \n          <attachment\n              isobsolete=\"1\"\n
        \             ispatch=\"1\"\n              isprivate=\"0\"\n          >\n
        \           <attachid>246</attachid>\n            <date>2008-04-16 14:29:00
        +0000</date>\n            <delta_ts>2009-05-12 11:22:49 +0000</delta_ts>\n
        \           <desc>Fix by checking protection attribute for all nonlocal symbols</desc>\n
        \           <filename>bug314-publicimports.patch</filename>\n            <type>text/plain</type>\n
        \           <size>3459</size>\n            <attacher name=\"Christian Kamm\">kamm-removethis</attacher>\n
        \           \n              <data encoding=\"base64\">ZGlmZiAtTmF1ciBkbWQvc3JjL2RtZC9kZWNsYXJhdGlvbi5jIHNyYy9kbWQvZGVjbGFyYXRpb24u\nYwotLS0gZG1kL3NyYy9kbWQvZGVjbGFyYXRpb24uYwkyMDA4LTAyLTE3IDIxOjI0OjI0LjAwMDAw\nMDAwMCArMDEwMAorKysgc3JjL2RtZC9kZWNsYXJhdGlvbi5jCTIwMDgtMDQtMTYgMjE6MDI6MTUu\nMDAwMDAwMDAwICswMjAwCkBAIC0zNjIsNiArMzYyLDEwIEBACiANCiAgICAgc3RvcmFnZV9jbGFz\ncyB8PSBzYy0+c3RjICYgU1RDZGVwcmVjYXRlZDsNCiANCisgICAgLy8gYWRkIHRoaXMgaWYgeW91\nIHdhbnQgYWxpYXMgZGVjbGFyYXRpb25zIG91dHNpZGUgb2YNCisgICAgLy8gaW1wb3J0IGRlY2xh\ncmF0aW9ucyB0byBiZSBhZmZlY3RlZCBieSBwcm90ZWN0aW9uDQorICAgIHByb3RlY3Rpb24gPSBz\nYy0+cHJvdGVjdGlvbjsNCisNCiAgICAgLy8gR2l2ZW46DQogICAgIC8vCWFsaWFzIGZvby5iYXIu\nYWJjIGRlZjsNCiAgICAgLy8gaXQgaXMgbm90IGtub3dhYmxlIGZyb20gdGhlIHN5bnRheCB3aGV0\naGVyIHRoaXMgaXMgYW4gYWxpYXMNCmRpZmYgLU5hdXIgZG1kL3NyYy9kbWQvZHN5bWJvbC5jIHNy\nYy9kbWQvZHN5bWJvbC5jCi0tLSBkbWQvc3JjL2RtZC9kc3ltYm9sLmMJMjAwNy0wOS0wMyAwOTox\nMTowMi4wMDAwMDAwMDAgKzAyMDAKKysrIHNyYy9kbWQvZHN5bWJvbC5jCTIwMDgtMDQtMTYgMjE6\nMTA6MzkuMDAwMDAwMDAwICswMjAwCkBAIC02MTMsNiArNjEzLDE0IEBACiAgICAgLy9wcmludGYo\nIiVzLT5TY29wZURzeW1ib2w6OnNlYXJjaChpZGVudD0nJXMnLCBmbGFncz14JXgpXG4iLCB0b0No\nYXJzKCksIGlkZW50LT50b0NoYXJzKCksIGZsYWdzKTsNCiAgICAgLy8gTG9vayBpbiBzeW1ib2xz\nIGRlY2xhcmVkIGluIHRoaXMgbW9kdWxlDQogICAgIHMgPSBzeW10YWIgPyBzeW10YWItPmxvb2t1\ncChpZGVudCkgOiBOVUxMOw0KKw0KKyAgICAvLyBoaWRlIHByaXZhdGUgbm9ubG9jYWwgc3ltYm9s\ncw0KKyAgICAvLyBUSElTIElTIFBST0JBQkxZIEJST0tFTjogYXQgdGhlIGVuZCBvZiB0aGUgZnVu\nY3Rpb24NCisgICAgLy8gc29tZXRoaW5nIHNpbWlsYXIgaXMgZG9uZSBmb3IgZGVjbGFyYXRpb25z\nIGFuZCB0aGF0DQorICAgIC8vIGNvbnRhaW5zIGEgc3BlY2lhbCBjYXNlIGZvciB0ZW1wbGF0ZSBt\naXhpbnMNCisgICAgaWYgKHMgJiYgZmxhZ3MgJiAxICYmIHMtPnByb3QoKSA9PSBQUk9UcHJpdmF0\nZSkNCisJcyA9IE5VTEw7DQorDQogICAgIGlmIChzKQ0KICAgICB7DQogCS8vcHJpbnRmKCJcdHMg\nPSAnJXMuJXMnXG4iLHRvQ2hhcnMoKSxzLT50b0NoYXJzKCkpOw0KZGlmZiAtTmF1ciBkbWQvc3Jj\nL2RtZC9pbXBvcnQuYyBzcmMvZG1kL2ltcG9ydC5jCi0tLSBkbWQvc3JjL2RtZC9pbXBvcnQuYwky\nMDA3LTA0LTEwIDA5OjM5OjAwLjAwMDAwMDAwMCArMDIwMAorKysgc3JjL2RtZC9pbXBvcnQuYwky\nMDA4LTA0LTE2IDIxOjA1OjQ2LjAwMDAwMDAwMCArMDIwMApAQCAtNjAsNiArNjAsMTAgQEAKICAg\nICByZXR1cm4gaXNzdGF0aWMgPyAoY2hhciAqKSJzdGF0aWMgaW1wb3J0IiA6IChjaGFyICopImlt\ncG9ydCI7DQogfQ0KIA0KK2VudW0gUFJPVCBJbXBvcnQ6OnByb3QoKQ0KK3sNCisgICAgcmV0dXJu\nIHByb3RlY3Rpb247DQorfQ0KIA0KIERzeW1ib2wgKkltcG9ydDo6c3ludGF4Q29weShEc3ltYm9s\nICpzKQ0KIHsNCkBAIC0xMTksNiArMTIzLDEyIEBACiANCiAgICAgbG9hZChzYyk7DQogDQorICAg\nIC8qIERlZmF1bHQgdG8gcHJpdmF0ZSBpbXBvcnRpbmcNCisgICAgICovDQorICAgIHByb3RlY3Rp\nb24gPSBzYy0+cHJvdGVjdGlvbjsNCisgICAgaWYgKCFzYy0+ZXhwbGljaXRQcm90ZWN0aW9uKQ0K\nKwlwcm90ZWN0aW9uID0gUFJPVHByaXZhdGU7DQorDQogICAgIGlmIChtb2QpDQogICAgIHsNCiAj\naWYgMA0KQEAgLTEzMywxMiArMTQzLDcgQEAKIA0KIAlpZiAoIWlzc3RhdGljICYmICFhbGlhc0lk\nICYmICFuYW1lcy5kaW0pDQogCXsNCi0JICAgIC8qIERlZmF1bHQgdG8gcHJpdmF0ZSBpbXBvcnRp\nbmcNCi0JICAgICAqLw0KLQkgICAgZW51bSBQUk9UIHByb3QgPSBzYy0+cHJvdGVjdGlvbjsNCi0J\nICAgIGlmICghc2MtPmV4cGxpY2l0UHJvdGVjdGlvbikNCi0JCXByb3QgPSBQUk9UcHJpdmF0ZTsN\nCi0JICAgIHNjLT5zY29wZXN5bS0+aW1wb3J0U2NvcGUobW9kLCBwcm90KTsNCisJICAgIHNjLT5z\nY29wZXN5bS0+aW1wb3J0U2NvcGUobW9kLCBwcm90ZWN0aW9uKTsNCiAJfQ0KIA0KIAkvLyBNb2R1\nbGVzIG5lZWQgYSBsaXN0IG9mIGVhY2ggaW1wb3J0ZWQgbW9kdWxlDQpAQCAtMTQ5LDEzICsxNTQs\nMTQgQEAKIA0KIAlzYyA9IHNjLT5wdXNoKG1vZCk7DQogCWZvciAoc2l6ZV90IGkgPSAwOyBpIDwg\nYWxpYXNkZWNscy5kaW07IGkrKykNCi0JeyAgIERzeW1ib2wgKnMgPSAoRHN5bWJvbCAqKWFsaWFz\nZGVjbHMuZGF0YVtpXTsNCisJeyAgIEFsaWFzRGVjbGFyYXRpb24gKmFkID0gKEFsaWFzRGVjbGFy\nYXRpb24gKilhbGlhc2RlY2xzLmRhdGFbaV07DQogDQogCSAgICAvL3ByaW50ZigiXHRJbXBvcnQg\nYWxpYXMgc2VtYW50aWMoJyVzJylcbiIsIHMtPnRvQ2hhcnMoKSk7DQogCSAgICBpZiAoIW1vZC0+\nc2VhcmNoKGxvYywgKElkZW50aWZpZXIgKiluYW1lcy5kYXRhW2ldLCAwKSkNCiAJCWVycm9yKCIl\ncyBub3QgZm91bmQiLCAoKElkZW50aWZpZXIgKiluYW1lcy5kYXRhW2ldKS0+dG9DaGFycygpKTsN\nCiANCi0JICAgIHMtPnNlbWFudGljKHNjKTsNCisJICAgIGFkLT5zZW1hbnRpYyhzYyk7DQorCSAg\nICBhZC0+cHJvdGVjdGlvbiA9IHByb3RlY3Rpb247DQogCX0NCiAJc2MgPSBzYy0+cG9wKCk7DQog\nICAgIH0NCmRpZmYgLU5hdXIgZG1kL3NyYy9kbWQvaW1wb3J0Lmggc3JjL2RtZC9pbXBvcnQuaAot\nLS0gZG1kL3NyYy9kbWQvaW1wb3J0LmgJMjAwNy0wNC0xMCAwOTozODo1OC4wMDAwMDAwMDAgKzAy\nMDAKKysrIHNyYy9kbWQvaW1wb3J0LmgJMjAwOC0wNC0xNiAyMTowNjoyOC4wMDAwMDAwMDAgKzAy\nMDAKQEAgLTM0LDYgKzM0LDcgQEAKICAgICBJZGVudGlmaWVyICppZDsJCS8vIG1vZHVsZSBJZGVu\ndGlmaWVyDQogICAgIElkZW50aWZpZXIgKmFsaWFzSWQ7DQogICAgIGludCBpc3N0YXRpYzsJCS8v\nICE9MCBpZiBzdGF0aWMgaW1wb3J0DQorICAgIGVudW0gUFJPVCBwcm90ZWN0aW9uOw0KIA0KICAg\nICAvLyBQYWlycyBvZiBhbGlhcz1uYW1lIHRvIGJpbmQgaW50byBjdXJyZW50IG5hbWVzcGFjZQ0K\nICAgICBBcnJheSBuYW1lczsNCkBAIC00OSw2ICs1MCw3IEBACiAgICAgdm9pZCBhZGRBbGlhcyhJ\nZGVudGlmaWVyICpuYW1lLCBJZGVudGlmaWVyICphbGlhcyk7DQogDQogICAgIGNoYXIgKmtpbmQo\nKTsNCisgICAgZW51bSBQUk9UIHByb3QoKTsNCiAgICAgRHN5bWJvbCAqc3ludGF4Q29weShEc3lt\nYm9sICpzKTsJLy8gY29weSBvbmx5IHN5bnRheCB0cmVlcw0KICAgICB2b2lkIGxvYWQoU2NvcGUg\nKnNjKTsNCiAgICAgdm9pZCBzZW1hbnRpYyhTY29wZSAqc2MpOw0K\n</data>\n\n
        \         </attachment>\n          <attachment\n              isobsolete=\"1\"\n
        \             ispatch=\"1\"\n              isprivate=\"0\"\n          >\n
        \           <attachid>364</attachid>\n            <date>2009-05-12 11:22:00
        +0000</date>\n            <delta_ts>2010-08-12 12:08:52 +0000</delta_ts>\n
        \           <desc>patch</desc>\n            <filename>313-314.patch</filename>\n
        \           <type>text/plain</type>\n            <size>2708</size>\n            <attacher
        name=\"Christian Kamm\">kamm-removethis</attacher>\n            \n              <data
        encoding=\"base64\">ZGlmZiAtciA3ZTBhNzY2ZmVmNDcgLXIgZTgzYmE0YWU0ODc4IGRtZC9kc3ltYm9sLmMKLS0tIGEv\nZG1kL2RzeW1ib2wuYwlXZWQgT2N0IDAxIDE5OjE1OjE3IDIwMDggKzAyMDAKKysrIGIvZG1kL2Rz\neW1ib2wuYwlXZWQgT2N0IDAxIDE5OjE2OjEwIDIwMDggKzAyMDAKQEAgLTY0Niw2ICs2NDYsMTEg\nQEAKIAogICAgIC8vIExvb2sgaW4gc3ltYm9scyBkZWNsYXJlZCBpbiB0aGlzIG1vZHVsZQogICAg\nIERzeW1ib2wgKnMgPSBzeW10YWIgPyBzeW10YWItPmxvb2t1cChpZGVudCkgOiBOVUxMOworCisg\nICAgLy8gaGlkZSBwcml2YXRlIG5vbmxvY2FsIHN5bWJvbHMKKyAgICBpZiAoZmxhZ3MgJiAxICYm\nIHMgJiYgcy0+cHJvdCgpID09IFBST1Rwcml2YXRlKQorCXMgPSBOVUxMOworCiAgICAgaWYgKHMp\nCiAgICAgewogCS8vcHJpbnRmKCJcdHMgPSAnJXMuJXMnXG4iLHRvQ2hhcnMoKSxzLT50b0NoYXJz\nKCkpOwpkaWZmIC1yIDdlMGE3NjZmZWY0NyAtciBlODNiYTRhZTQ4NzggZG1kL2ltcG9ydC5jCi0t\nLSBhL2RtZC9pbXBvcnQuYwlXZWQgT2N0IDAxIDE5OjE1OjE3IDIwMDggKzAyMDAKKysrIGIvZG1k\nL2ltcG9ydC5jCVdlZCBPY3QgMDEgMTk6MTY6MTAgMjAwOCArMDIwMApAQCAtMzMsNiArMzMsNyBA\nQAogICAgIHRoaXMtPmlkID0gaWQ7DQogICAgIHRoaXMtPmFsaWFzSWQgPSBhbGlhc0lkOw0KICAg\nICB0aGlzLT5pc3N0YXRpYyA9IGlzc3RhdGljOw0KKyAgICBwcm90ZWN0aW9uID0gUFJPVHVuZGVm\naW5lZDsNCiAgICAgcGtnID0gTlVMTDsNCiAgICAgbW9kID0gTlVMTDsNCiANCkBAIC02MCw2ICs2\nMSwxMCBAQAogICAgIHJldHVybiBpc3N0YXRpYyA/IChjaGFyICopInN0YXRpYyBpbXBvcnQiIDog\nKGNoYXIgKikiaW1wb3J0IjsNCiB9DQogDQorZW51bSBQUk9UIEltcG9ydDo6cHJvdCgpDQorew0K\nKyAgICByZXR1cm4gcHJvdGVjdGlvbjsNCit9DQogDQogRHN5bWJvbCAqSW1wb3J0OjpzeW50YXhD\nb3B5KERzeW1ib2wgKnMpDQogew0KQEAgLTEzMSwxNCArMTM2LDE1IEBACiAJfQ0KICNlbmRpZg0K\nIA0KKwkvKiBEZWZhdWx0IHRvIHByaXZhdGUgaW1wb3J0aW5nDQorCSAqLw0KKwlwcm90ZWN0aW9u\nID0gc2MtPnByb3RlY3Rpb247DQorCWlmICghc2MtPmV4cGxpY2l0UHJvdGVjdGlvbikNCisJICAg\nIHByb3RlY3Rpb24gPSBQUk9UcHJpdmF0ZTsNCisNCiAJaWYgKCFpc3N0YXRpYyAmJiAhYWxpYXNJ\nZCAmJiAhbmFtZXMuZGltKQ0KIAl7DQotCSAgICAvKiBEZWZhdWx0IHRvIHByaXZhdGUgaW1wb3J0\naW5nDQotCSAgICAgKi8NCi0JICAgIGVudW0gUFJPVCBwcm90ID0gc2MtPnByb3RlY3Rpb247DQot\nCSAgICBpZiAoIXNjLT5leHBsaWNpdFByb3RlY3Rpb24pDQotCQlwcm90ID0gUFJPVHByaXZhdGU7\nDQotCSAgICBzYy0+c2NvcGVzeW0tPmltcG9ydFNjb3BlKG1vZCwgcHJvdCk7DQorCSAgICBzYy0+\nc2NvcGVzeW0tPmltcG9ydFNjb3BlKG1vZCwgcHJvdGVjdGlvbik7DQogCX0NCiANCiAJLy8gTW9k\ndWxlcyBuZWVkIGEgbGlzdCBvZiBlYWNoIGltcG9ydGVkIG1vZHVsZQ0KQEAgLTE0OSwxMyArMTU1\nLDE0IEBACiANCiAJc2MgPSBzYy0+cHVzaChtb2QpOw0KIAlmb3IgKHNpemVfdCBpID0gMDsgaSA8\nIGFsaWFzZGVjbHMuZGltOyBpKyspDQotCXsgICBEc3ltYm9sICpzID0gKERzeW1ib2wgKilhbGlh\nc2RlY2xzLmRhdGFbaV07DQorCXsgICBBbGlhc0RlY2xhcmF0aW9uICphZCA9IChBbGlhc0RlY2xh\ncmF0aW9uICopYWxpYXNkZWNscy5kYXRhW2ldOw0KIA0KIAkgICAgLy9wcmludGYoIlx0SW1wb3J0\nIGFsaWFzIHNlbWFudGljKCclcycpXG4iLCBzLT50b0NoYXJzKCkpOw0KIAkgICAgaWYgKCFtb2Qt\nPnNlYXJjaChsb2MsIChJZGVudGlmaWVyICopbmFtZXMuZGF0YVtpXSwgMCkpDQogCQllcnJvcigi\nJXMgbm90IGZvdW5kIiwgKChJZGVudGlmaWVyICopbmFtZXMuZGF0YVtpXSktPnRvQ2hhcnMoKSk7\nDQogDQotCSAgICBzLT5zZW1hbnRpYyhzYyk7DQorCSAgICBhZC0+c2VtYW50aWMoc2MpOw0KKwkg\nICAgYWQtPnByb3RlY3Rpb24gPSBwcm90ZWN0aW9uOw0KIAl9DQogCXNjID0gc2MtPnBvcCgpOw0K\nICAgICB9DQpkaWZmIC1yIDdlMGE3NjZmZWY0NyAtciBlODNiYTRhZTQ4NzggZG1kL2ltcG9ydC5o\nCi0tLSBhL2RtZC9pbXBvcnQuaAlXZWQgT2N0IDAxIDE5OjE1OjE3IDIwMDggKzAyMDAKKysrIGIv\nZG1kL2ltcG9ydC5oCVdlZCBPY3QgMDEgMTk6MTY6MTAgMjAwOCArMDIwMApAQCAtMzQsNiArMzQs\nNyBAQAogICAgIElkZW50aWZpZXIgKmlkOwkJLy8gbW9kdWxlIElkZW50aWZpZXINCiAgICAgSWRl\nbnRpZmllciAqYWxpYXNJZDsNCiAgICAgaW50IGlzc3RhdGljOwkJLy8gIT0wIGlmIHN0YXRpYyBp\nbXBvcnQNCisgICAgZW51bSBQUk9UIHByb3RlY3Rpb247DQogDQogICAgIC8vIFBhaXJzIG9mIGFs\naWFzPW5hbWUgdG8gYmluZCBpbnRvIGN1cnJlbnQgbmFtZXNwYWNlDQogICAgIEFycmF5IG5hbWVz\nOw0KQEAgLTQ5LDYgKzUwLDcgQEAKICAgICB2b2lkIGFkZEFsaWFzKElkZW50aWZpZXIgKm5hbWUs\nIElkZW50aWZpZXIgKmFsaWFzKTsNCiANCiAgICAgY29uc3QgY2hhciAqa2luZCgpOw0KKyAgICBl\nbnVtIFBST1QgcHJvdCgpOw0KICAgICBEc3ltYm9sICpzeW50YXhDb3B5KERzeW1ib2wgKnMpOwkv\nLyBjb3B5IG9ubHkgc3ludGF4IHRyZWVzDQogICAgIHZvaWQgbG9hZChTY29wZSAqc2MpOw0KICAg\nICB2b2lkIHNlbWFudGljKFNjb3BlICpzYyk7DQo=\n</data>\n\n
        \         </attachment>\n      \n\n    </bug>\n\n</bugzilla>"
    http_version: 
  recorded_at: Thu, 19 Nov 2015 19:33:00 GMT
- request:
    method: get
    uri: https://gitlab.com/api/v4/projects/https:%2F%2Fd.puremagic.com%2Fissues%2Fshow_bug.cgi%3Fid=314
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Private-Token:
      - yk4sv48-tHyUJNBkcf56
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Server:
      - nginx
      Date:
      - Wed, 13 Jun 2018 15:40:31 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '35'
      Cache-Control:
      - no-cache
      Vary:
      - Origin
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Request-Id:
      - f8147272-59a3-4a94-8425-bc748f603bb2
      X-Runtime:
      - '0.030259'
      Ratelimit-Limit:
      - '600'
      Ratelimit-Observed:
      - '3'
      Ratelimit-Remaining:
      - '597'
      Ratelimit-Reset:
      - '1528904491'
      Ratelimit-Resettime:
      - Thu, 13 Jun 2018 15:41:31 GMT
    body:
      encoding: UTF-8
      string: '{"message":"404 Project Not Found"}'
    http_version: 
  recorded_at: Wed, 13 Jun 2018 15:40:31 GMT
- request:
    method: get
    uri: https://gitlab.com/api/v4/projects/https:%2F%2Fissues.dlang.org%2Fshow_bug.cgi%3Fid=314
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Private-Token:
      - yk4sv48-tHyUJNBkcf56
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Server:
      - nginx
      Date:
      - Wed, 13 Jun 2018 15:40:32 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '35'
      Cache-Control:
      - no-cache
      Vary:
      - Origin
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Request-Id:
      - d32e1ee2-d026-4d26-b285-cfdaf7adf8fe
      X-Runtime:
      - '0.031531'
      Ratelimit-Limit:
      - '600'
      Ratelimit-Observed:
      - '4'
      Ratelimit-Remaining:
      - '596'
      Ratelimit-Reset:
      - '1528904492'
      Ratelimit-Resettime:
      - Thu, 13 Jun 2018 15:41:32 GMT
    body:
      encoding: UTF-8
      string: '{"message":"404 Project Not Found"}'
    http_version: 
  recorded_at: Wed, 13 Jun 2018 15:40:32 GMT
recorded_with: VCR 4.0.0
