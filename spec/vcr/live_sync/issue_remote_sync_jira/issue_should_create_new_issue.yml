---
http_interactions:
- request:
    method: get
    uri: https://issues.apache.org/jira/browse/ARIES-998
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.36 (KHTML,
        like Gecko) Chrome/35.0.1916.153 Safari/537.36
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 19 Nov 2015 19:32:48 GMT
      Server:
      - Apache-Coyote/1.1
      X-Arequestid:
      - 1172x30587816x3
      Cache-Control:
      - no-cache, no-store, must-revalidate
      Pragma:
      - no-cache
      Expires:
      - Thu, 01 Jan 1970 00:00:00 GMT
      X-Asen:
      - SEN-2062203
      X-Ausername:
      - anonymous
      X-Content-Type-Options:
      - nosniff
      Content-Type:
      - text/html;charset=utf-8
      Set-Cookie:
      - JSESSIONID=9B88A6A936455E35411870AC18217296; Path=/jira/; Secure; HttpOnly
      - atlassian.xsrf.token=A5KQ-2QAV-T4JA-FDED|403b32c80729ec30f4e95df1e0808e61873a2982|lout;
        Path=/jira; Secure
      Via:
      - 1.1 issues.apache.org
      Vary:
      - Accept-Encoding
      Connection:
      - close
      Transfer-Encoding:
      - chunked
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Thu, 19 Nov 2015 19:32:49 GMT
- request:
    method: get
    uri: https://issues.apache.org/jira/si/jira.issueviews:issue-xml/ARIES-998/ARIES-998.xml
    body:
      encoding: US-ASCII
      string: ''
    headers: {}
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Thu, 19 Nov 2015 19:32:49 GMT
      Server:
      - Apache-Coyote/1.1
      X-Arequestid:
      - 1172x30587859x4
      X-Asen:
      - SEN-2062203
      X-Ausername:
      - anonymous
      X-Content-Type-Options:
      - nosniff
      Content-Type:
      - text/xml;charset=utf-8
      Content-Length:
      - '7669'
      Set-Cookie:
      - atlassian.xsrf.token=A5KQ-2QAV-T4JA-FDED|6ddb56312f8baaf4deeebf477f343032ef8a4cb4|lout;
        Path=/jira; Secure
      Via:
      - 1.1 issues.apache.org
      Vary:
      - Accept-Encoding
      Connection:
      - close
    body:
      encoding: UTF-8
      string: "<!-- \nRSS generated by JIRA (6.3.4#6332-sha1:51bc225ef474afe3128b2f66878477f322397b16)
        at Thu Nov 19 19:32:50 UTC 2015\n\nIt is possible to restrict the fields that
        are returned in this document by specifying the 'field' parameter in your
        request.\nFor example, to request only the issue key and summary add field=key&field=summary
        to the URL of your request.\nFor example:\nhttps://issues.apache.org/jira/si/jira.issueviews:issue-xml/ARIES-998/ARIES-998.xml?field=key&amp;field=summary\n-->\n<rss
        version=\"0.92\" >\n<channel>\n    <title>ASF JIRA</title>\n    <link>https://issues.apache.org/jira</link>\n
        \   <description>This file is an XML representation of an issue</description>\n
        \   <language>en-uk</language>    <build-info>\n        <version>6.3.4</version>\n
        \       <build-number>6332</build-number>\n        <build-date>15-08-2014</build-date>\n
        \   </build-info>\n\n<item>\n            <title>[ARIES-998] Support a subset
        of blueprint outside OSGi</title>\n                <link>https://issues.apache.org/jira/browse/ARIES-998</link>\n
        \               <project id=\"12310981\" key=\"ARIES\">Aries</project>\n                    <description></description>\n
        \               <environment></environment>\n        <key id=\"12626608\">ARIES-998</key>\n
        \           <summary>Support a subset of blueprint outside OSGi</summary>\n
        \               <type id=\"2\" iconUrl=\"https://issues.apache.org/jira/images/icons/issuetypes/newfeature.png\">New
        Feature</type>\n                                            <priority id=\"3\"
        iconUrl=\"https://issues.apache.org/jira/images/icons/priorities/major.png\">Major</priority>\n
        \                       <status id=\"3\" iconUrl=\"https://issues.apache.org/jira/images/icons/statuses/inprogress.png\"
        description=\"This issue is being actively worked on at the moment by the
        assignee.\">In Progress</status>\n                    <statusCategory id=\"4\"
        key=\"indeterminate\" colorName=\"yellow\"/>\n                                    <resolution
        id=\"-1\">Unresolved</resolution>\n                                        <assignee
        username=\"gnt\">Guillaume Nodet</assignee>\n                                    <reporter
        username=\"gnt\">Guillaume Nodet</reporter>\n                        <labels>\n
        \                   </labels>\n                <created>Tue, 8 Jan 2013 18:51:34
        +0000</created>\n                <updated>Wed, 9 Jan 2013 08:40:14 +0000</updated>\n
        \                                                                           <component>Blueprint</component>\n
        \                       <due></due>\n                            <votes>0</votes>\n
        \                                   <watches>1</watches>\n                                                                <comments>\n
        \                           <comment id=\"13547771\" author=\"gnt\" created=\"Wed,
        9 Jan 2013 08:40:14 +0000\"  >&lt;p&gt;Initial implementation&lt;/p&gt;\n\n&lt;p&gt;Committing
        to &lt;a href=&quot;https://svn.apache.org/repos/asf/aries/trunk&quot; class=&quot;external-link&quot;
        rel=&quot;nofollow&quot;&gt;https://svn.apache.org/repos/asf/aries/trunk&lt;/a&gt;
        ...&lt;br/&gt;\n\tA\tblueprint/blueprint-noosgi/pom.xml&lt;br/&gt;\n\tA\tblueprint/blueprint-noosgi/src/main/java/org/apache/aries/blueprint/container/BlueprintContainerImpl.java&lt;br/&gt;\n\tA\tblueprint/blueprint-noosgi/src/main/java/org/apache/aries/blueprint/container/GenericType.java&lt;br/&gt;\n\tA\tblueprint/blueprint-noosgi/src/main/java/org/apache/aries/blueprint/container/NoOsgiBlueprintRepository.java&lt;br/&gt;\n\tA\tblueprint/blueprint-noosgi/src/main/java/org/apache/aries/blueprint/container/NoOsgiRecipeBuilder.java&lt;br/&gt;\n\tA\tblueprint/blueprint-noosgi/src/main/java/org/apache/aries/blueprint/container/SimpleNamespaceHandlerSet.java&lt;br/&gt;\n\tA\tblueprint/blueprint-noosgi/src/main/java/org/apache/aries/blueprint/ext/AbstractPropertyPlaceholder.java&lt;br/&gt;\n\tA\tblueprint/blueprint-noosgi/src/main/java/org/apache/aries/blueprint/services/ExtendedBlueprintContainer.java&lt;br/&gt;\n\tA\tblueprint/blueprint-noosgi/src/test/java/org.apache.aries.blueprint/BlueprintContainerTest.java&lt;br/&gt;\n\tA\tblueprint/blueprint-noosgi/src/test/java/org.apache.aries.blueprint/sample/Bar.java&lt;br/&gt;\n\tA\tblueprint/blueprint-noosgi/src/test/java/org.apache.aries.blueprint/sample/CurrencyTypeConverter.java&lt;br/&gt;\n\tA\tblueprint/blueprint-noosgi/src/test/java/org.apache.aries.blueprint/sample/DateTypeConverter.java&lt;br/&gt;\n\tA\tblueprint/blueprint-noosgi/src/test/java/org.apache.aries.blueprint/sample/Foo.java&lt;br/&gt;\n\tA\tblueprint/blueprint-noosgi/src/test/resources/test.xml&lt;br/&gt;\n\tM\tblueprint/pom.xml&lt;br/&gt;\nCommitted
        r1430734&lt;/p&gt;</comment>\n                    </comments>\n                    <attachments>\n
        \                   </attachments>\n                <subtasks>\n                    </subtasks>\n
        \               <customfields>\n                                                <customfield
        id=\"customfield_12310310\" key=\"com.atlassian.jira.toolkit:attachments\">\n
        \                       <customfieldname>Attachment count</customfieldname>\n
        \                       <customfieldvalues>\n                            <customfieldvalue>0.0</customfieldvalue>\n
        \                       </customfieldvalues>\n                    </customfield>\n
customfield
        id=\"customfield_12310420\" key=\"com.pyxis.greenhopper.jira:gh-global-rank\">\n
        \                       <customfieldname>Global Rank</customfieldname>\n                        <customfieldvalues>\n
        \                           <customfieldvalue>303215</customfieldvalue>\n
        \                       </customfieldvalues>\n                    </customfield>\n
        \                                                                                                                                                   <customfield
        id=\"customfield_12311820\" key=\"com.pyxis.greenhopper.jira:gh-lexo-rank\">\n
        \                       <customfieldname>Rank</customfieldname>\n                        <customfieldvalues>\n
        \                           <customfieldvalue>0|i178pj:</customfieldvalue>\n\n
        \                       </customfieldvalues>\n                    </customfield>\n
        \                                                               <customfield
        id=\"customfield_12310920\" key=\"com.pyxis.greenhopper.jira:gh-global-rank\">\n
        \                       <customfieldname>Rank (Obsolete)</customfieldname>\n
        \                       <customfieldvalues>\n                            <customfieldvalue>250379</customfieldvalue>\n
        \                       </customfieldvalues>\n                    </customfield>\n
        \                                                                                                                                                                                                                                                                   </customfields>\n
        \   </item>\n</channel>\n</rss>"
    http_version: 
  recorded_at: Thu, 19 Nov 2015 19:32:50 GMT
- request:
    method: get
    uri: https://gitlab.com/api/v4/projects/https:%2F%2Fissues.apache.org%2Fjira%2Fbrowse%2FARIES-998
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Private-Token:
      - yk4sv48-tHyUJNBkcf56
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Server:
      - nginx
      Date:
      - Wed, 13 Jun 2018 15:40:26 GMT
      Content-Type:
      - application/json
      Content-Length:
      - '35'
      Cache-Control:
      - no-cache
      Vary:
      - Origin
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Request-Id:
      - 5483ffa7-3ee9-4947-9532-80f1ea176166
      X-Runtime:
      - '0.033068'
      Ratelimit-Limit:
      - '600'
      Ratelimit-Observed:
      - '1'
      Ratelimit-Remaining:
      - '599'
      Ratelimit-Reset:
      - '1528904486'
      Ratelimit-Resettime:
      - Thu, 13 Jun 2018 15:41:26 GMT
    body:
      encoding: UTF-8
      string: '{"message":"404 Project Not Found"}'
    http_version: 
  recorded_at: Wed, 13 Jun 2018 15:40:26 GMT
recorded_with: VCR 4.0.0
